"use strict";
var fs = require('fs');
// import process = require('process')
var path = require('path');
var file_utils_1 = require('../lib/file-utils');
var temp = require('temp');
var loglevel = require('loglevel');
var Promise = require('bluebird');
var child_process_1 = require('child_process');
var index_1 = require('../lib/index');
var log = loglevel.getLogger('full-stack-smoke');
describe("full-stack-smoke", function () {
    var projectPath = undefined;
    var originalTimeout = jasmine.DEFAULT_TIMEOUT_INTERVAL;
    jasmine.DEFAULT_TIMEOUT_INTERVAL = 200000;
    var client = undefined;
    beforeAll(function (done) {
        jasmine.DEFAULT_TIMEOUT_INTERVAL = 200000;
        temp.track();
        originalTimeout = jasmine.DEFAULT_TIMEOUT_INTERVAL;
        projectPath = temp.mkdirSync('ensime-integration-test');
        generateProject(projectPath).then(function () {
            fs.exists(path.join(projectPath, "build.sbt"), function (buildDotSbtExists) {
                expect(buildDotSbtExists);
                genDotEnsime(projectPath).then(function (exitCode) {
                    expect(exitCode).toBe(0);
                    var dotEnsimePath = path.join(projectPath, ".ensime");
                    fs.exists(dotEnsimePath, function (dotEnsimeExists) {
                        expect(dotEnsimeExists);
                    });
                    startEnsime(dotEnsimePath).then(function (c) {
                        log.debug('got a connected client', c);
                        client = c;
                        done();
                    });
                });
            });
        });
    });
    afterAll(function (done) {
        jasmine.DEFAULT_TIMEOUT_INTERVAL = originalTimeout;
        client.destroy();
        temp.cleanupSync();
        fs.exists(projectPath, function (exists) {
            expect(exists).toBeFalsy();
            done();
        });
    });
    /**
     * Generates project structure and build.sbt
     */
    var generateProject = function (dir) {
        fs.mkdirSync(path.join(dir, 'src'));
        fs.mkdirSync(path.join(dir, 'project'));
        fs.mkdirSync(path.join(dir, 'src', 'main'));
        fs.mkdirSync(path.join(dir, 'src', 'main', 'scala'));
        var buildDotSbt = "\n            lazy val commonSettings = Seq(\n                organization := \"org.ensime\",\n                version := \"0.1-SNAPSHOT\",\n                scalaVersion := \"2.11.8\"\n            )\n\n            lazy val root = (project in file(\".\")).\n                settings(commonSettings: _*).\n                settings(\n                    name := \"ensime-test-project\"\n                )\n        ";
        // http://stackoverflow.com/questions/37833355/how-to-specify-which-overloaded-function-i-want-in-typescript/37835265#37835265
        var buildSbtP = file_utils_1.writeFile(path.join(dir, "build.sbt"), buildDotSbt);
        var pluginsSbtP = file_utils_1.writeFile(path.join(dir, 'project', 'plugins.sbt'), "addSbtPlugin(\"org.ensime\" % \"sbt-ensime\" % \"0.6.0\")");
        return Promise.all([buildDotSbt, pluginsSbtP]);
    };
    /**
     * Calls sbt ensimeConfig to generate .ensime
     */
    var genDotEnsime = function (dir) {
        var pid = child_process_1.spawn("sbt", ["ensimeConfig"], { cwd: dir });
        var p = Promise.defer();
        pid.stdin.end();
        pid.stdout.on('data', function (chunk) {
            log.info('ensimeConfig', chunk.toString('utf8'));
        });
        pid.on('close', function (exitCode) {
            p.resolve(exitCode);
        });
        return p.promise;
    };
    function startEnsime(dotEnsimePath) {
        return index_1.dotEnsimeUtils.parseDotEnsime(dotEnsimePath).then(function (dotEnsime) {
            log.debug("got a parsed .ensime");
            var serverStarter = function (project) {
                var assemblyJar = process.env.ENSIME_ASSEMBLY_JAR;
                if (!assemblyJar) {
                    log.error("Please point to assembly jar with env ENSIME_ASSEMBLY_JAR");
                    fail("Please point to assembly jar with env ENSIME_ASSEMBLY_JAR");
                }
                return index_1.startServerFromAssemblyJar(assemblyJar, project);
            };
            return index_1.clientStarterFromServerStarter(serverStarter)(dotEnsime, "2.0.0-SNAPSHOT", function (msg) {
                log.debug(msg);
            });
        });
    }
    it("should get connection info", function (done) {
        var fooDotScala = path.join(projectPath, "src", "main", "scala", "Foo.scala");
        var content = "\n            object Foo {\n                def bar = \"baz\";\n            }\n        ";
        file_utils_1.writeFile(fooDotScala, content);
        client.post({ "typehint": "ConnectionInfoReq" }).then(function (res) {
            log.debug("got an answer: ", res);
            // client.typecheckFile(fooDotScala);
            // client.typecheckBuffer(fooDotScala, content, (res) => {
            //     log.debug("got an answer: ", res)
            // });
            done();
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
