(function() {
  var fs, log, loglevel, path, temp, updateEnsimeServer;

  updateEnsimeServer = (require('../lib/ensime-server-update-coursier'))["default"];

  fs = require('fs');

  path = require('path');

  temp = require('temp');

  loglevel = require('loglevel');

  loglevel.setDefaultLevel('trace');

  loglevel.setLevel('trace');

  log = loglevel.getLogger('ensime-server-update-coursier-spec');

  describe("ensime-server-update", function() {
    var originalTimeout;
    originalTimeout = jasmine.DEFAULT_TIMEOUT_INTERVAL;
    beforeEach(function() {
      originalTimeout = jasmine.DEFAULT_TIMEOUT_INTERVAL;
      return jasmine.DEFAULT_TIMEOUT_INTERVAL = 120000;
    });
    xit("should be able to download coursier", function(done) {
      var doUpdateServer, dotEnsime, failure, getPidLogger, tempDir;
      tempDir = temp.mkdirSync('ensime-integration-test');
      dotEnsime = {
        name: "test",
        scalaVersion: "2.11.8",
        scalaEdition: "2.11",
        rootDir: tempDir,
        cacheDir: tempDir + path.sep + ".ensime_cache",
        dotEnsimePath: tempDir + path.sep + ".ensime"
      };
      getPidLogger = function() {
        return function(pid) {
          pid.stdout.on('data', function(chunk) {
            return log.info(chunk.toString('utf8'));
          });
          return pid.stderr.on('data', function(chunk) {
            return log.info(chunk.toString('utf8'));
          });
        };
      };
      failure = function(msg, code) {
        return log.error(msg, code);
      };
      log.error('doing ensime server update using coursier');
      doUpdateServer = updateEnsimeServer(tempDir, getPidLogger, failure);
      log.error('updater created');
      doUpdateServer(dotEnsime, "0.9.10-SNAPSHOT", path.join(tempDir, "classpathfile"), function() {
        return done();
      });
      return log.trace('ran doUpdateServer');
    });
    return afterEach(function() {
      jasmine.DEFAULT_TIMEOUT_INTERVAL = originalTimeout;
      return temp.cleanupSync();
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlYy1pbnRlZ3JhdGlvbi9lbnNpbWUtc2VydmVyLXVwZGF0ZS1jb3Vyc2llci1zcGVjLmpzIiwic291cmNlcyI6WyJzcGVjLWludGVncmF0aW9uL2Vuc2ltZS1zZXJ2ZXItdXBkYXRlLWNvdXJzaWVyLXNwZWMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxrQkFBQSxHQUFxQixDQUFDLE9BQUEsQ0FBUSxzQ0FBUixDQUFELENBQWlELEVBQUMsT0FBRDs7RUFDdEUsRUFBQSxHQUFLLE9BQUEsQ0FBUSxJQUFSOztFQUNMLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUjs7RUFDUCxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVI7O0VBRVAsUUFBQSxHQUFXLE9BQUEsQ0FBUSxVQUFSOztFQUNYLFFBQVEsQ0FBQyxlQUFULENBQXlCLE9BQXpCOztFQUNBLFFBQVEsQ0FBQyxRQUFULENBQWtCLE9BQWxCOztFQUVBLEdBQUEsR0FBTSxRQUFRLENBQUMsU0FBVCxDQUFtQixvQ0FBbkI7O0VBRU4sUUFBQSxDQUFTLHNCQUFULEVBQWlDLFNBQUE7QUFDL0IsUUFBQTtJQUFBLGVBQUEsR0FBa0IsT0FBTyxDQUFDO0lBRTFCLFVBQUEsQ0FBVyxTQUFBO01BQ1QsZUFBQSxHQUFrQixPQUFPLENBQUM7YUFDMUIsT0FBTyxDQUFDLHdCQUFSLEdBQW1DO0lBRjFCLENBQVg7SUFLQSxHQUFBLENBQUkscUNBQUosRUFBMkMsU0FBQyxJQUFEO0FBR3pDLFVBQUE7TUFBQSxPQUFBLEdBQVUsSUFBSSxDQUFDLFNBQUwsQ0FBZSx5QkFBZjtNQUVWLFNBQUEsR0FDRTtRQUFBLElBQUEsRUFBTSxNQUFOO1FBQ0EsWUFBQSxFQUFjLFFBRGQ7UUFFQSxZQUFBLEVBQWMsTUFGZDtRQUdBLE9BQUEsRUFBUyxPQUhUO1FBSUEsUUFBQSxFQUFVLE9BQUEsR0FBVSxJQUFJLENBQUMsR0FBZixHQUFxQixlQUovQjtRQUtBLGFBQUEsRUFBZSxPQUFBLEdBQVUsSUFBSSxDQUFDLEdBQWYsR0FBcUIsU0FMcEM7O01BT0YsWUFBQSxHQUFlLFNBQUE7ZUFDYixTQUFDLEdBQUQ7VUFDRSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQVgsQ0FBYyxNQUFkLEVBQXNCLFNBQUMsS0FBRDttQkFBVyxHQUFHLENBQUMsSUFBSixDQUFTLEtBQUssQ0FBQyxRQUFOLENBQWUsTUFBZixDQUFUO1VBQVgsQ0FBdEI7aUJBQ0EsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFYLENBQWMsTUFBZCxFQUFzQixTQUFDLEtBQUQ7bUJBQVcsR0FBRyxDQUFDLElBQUosQ0FBUyxLQUFLLENBQUMsUUFBTixDQUFlLE1BQWYsQ0FBVDtVQUFYLENBQXRCO1FBRkY7TUFEYTtNQUtmLE9BQUEsR0FBVSxTQUFDLEdBQUQsRUFBTSxJQUFOO2VBQWUsR0FBRyxDQUFDLEtBQUosQ0FBVSxHQUFWLEVBQWUsSUFBZjtNQUFmO01BRVYsR0FBRyxDQUFDLEtBQUosQ0FBVSwyQ0FBVjtNQUNBLGNBQUEsR0FBaUIsa0JBQUEsQ0FBbUIsT0FBbkIsRUFBNEIsWUFBNUIsRUFBMEMsT0FBMUM7TUFJakIsR0FBRyxDQUFDLEtBQUosQ0FBVSxpQkFBVjtNQUVBLGNBQUEsQ0FBZSxTQUFmLEVBQTBCLGlCQUExQixFQUE2QyxJQUFJLENBQUMsSUFBTCxDQUFVLE9BQVYsRUFBbUIsZUFBbkIsQ0FBN0MsRUFBa0YsU0FBQTtlQUFNLElBQUEsQ0FBQTtNQUFOLENBQWxGO2FBQ0EsR0FBRyxDQUFDLEtBQUosQ0FBVSxvQkFBVjtJQTVCeUMsQ0FBM0M7V0ErQkEsU0FBQSxDQUFVLFNBQUE7TUFDUixPQUFPLENBQUMsd0JBQVIsR0FBbUM7YUFDbkMsSUFBSSxDQUFDLFdBQUwsQ0FBQTtJQUZRLENBQVY7RUF2QytCLENBQWpDO0FBWEEiLCJzb3VyY2VzQ29udGVudCI6WyJ1cGRhdGVFbnNpbWVTZXJ2ZXIgPSAocmVxdWlyZSgnLi4vbGliL2Vuc2ltZS1zZXJ2ZXItdXBkYXRlLWNvdXJzaWVyJykpLmRlZmF1bHRcbmZzID0gcmVxdWlyZSAnZnMnXG5wYXRoID0gcmVxdWlyZSAncGF0aCdcbnRlbXAgPSByZXF1aXJlICd0ZW1wJ1xuXG5sb2dsZXZlbCA9IHJlcXVpcmUgJ2xvZ2xldmVsJ1xubG9nbGV2ZWwuc2V0RGVmYXVsdExldmVsKCd0cmFjZScpXG5sb2dsZXZlbC5zZXRMZXZlbCgndHJhY2UnKVxuXG5sb2cgPSBsb2dsZXZlbC5nZXRMb2dnZXIoJ2Vuc2ltZS1zZXJ2ZXItdXBkYXRlLWNvdXJzaWVyLXNwZWMnKVxuXG5kZXNjcmliZSBcImVuc2ltZS1zZXJ2ZXItdXBkYXRlXCIsIC0+XG4gIG9yaWdpbmFsVGltZW91dCA9IGphc21pbmUuREVGQVVMVF9USU1FT1VUX0lOVEVSVkFMXG4gIFxuICBiZWZvcmVFYWNoIC0+XG4gICAgb3JpZ2luYWxUaW1lb3V0ID0gamFzbWluZS5ERUZBVUxUX1RJTUVPVVRfSU5URVJWQUxcbiAgICBqYXNtaW5lLkRFRkFVTFRfVElNRU9VVF9JTlRFUlZBTCA9IDEyMDAwMFxuICBcbiAgXG4gIHhpdCBcInNob3VsZCBiZSBhYmxlIHRvIGRvd25sb2FkIGNvdXJzaWVyXCIsIChkb25lKSAtPlxuICAgICMgSmF2YSBpcyBpbnN0YWxsZWQgaW5zdGFsbGVkIG9uIGFwcHZleW9yIGJ1aWxkIHNlcnZlcnMgQzpcXFByb2dyYW0gRmlsZXNcXEphdmFcXGpkazEuOC4wXG4gICAgIyBodHRwOi8vd3d3LmFwcHZleW9yLmNvbS9kb2NzL2luc3RhbGxlZC1zb2Z0d2FyZSNqYXZhXG4gICAgdGVtcERpciA9IHRlbXAubWtkaXJTeW5jKCdlbnNpbWUtaW50ZWdyYXRpb24tdGVzdCcpXG4gICAgXG4gICAgZG90RW5zaW1lID1cbiAgICAgIG5hbWU6IFwidGVzdFwiXG4gICAgICBzY2FsYVZlcnNpb246IFwiMi4xMS44XCJcbiAgICAgIHNjYWxhRWRpdGlvbjogXCIyLjExXCJcbiAgICAgIHJvb3REaXI6IHRlbXBEaXJcbiAgICAgIGNhY2hlRGlyOiB0ZW1wRGlyICsgcGF0aC5zZXAgKyBcIi5lbnNpbWVfY2FjaGVcIlxuICAgICAgZG90RW5zaW1lUGF0aDogdGVtcERpciArIHBhdGguc2VwICsgXCIuZW5zaW1lXCJcblxuICAgIGdldFBpZExvZ2dlciA9IC0+XG4gICAgICAocGlkKSAtPlxuICAgICAgICBwaWQuc3Rkb3V0Lm9uICdkYXRhJywgKGNodW5rKSAtPiBsb2cuaW5mbyBjaHVuay50b1N0cmluZyAndXRmOCdcbiAgICAgICAgcGlkLnN0ZGVyci5vbiAnZGF0YScsIChjaHVuaykgLT4gbG9nLmluZm8gY2h1bmsudG9TdHJpbmcgJ3V0ZjgnXG4gICAgICBcbiAgICBmYWlsdXJlID0gKG1zZywgY29kZSkgLT4gbG9nLmVycm9yKG1zZywgY29kZSlcbiAgXG4gICAgbG9nLmVycm9yKCdkb2luZyBlbnNpbWUgc2VydmVyIHVwZGF0ZSB1c2luZyBjb3Vyc2llcicpXG4gICAgZG9VcGRhdGVTZXJ2ZXIgPSB1cGRhdGVFbnNpbWVTZXJ2ZXIodGVtcERpciwgZ2V0UGlkTG9nZ2VyLCBmYWlsdXJlKVxuICAgIFxuICAgIFxuICAgIFxuICAgIGxvZy5lcnJvcigndXBkYXRlciBjcmVhdGVkJylcbiAgICAjIGZ1bmN0aW9uIGRvVXBkYXRlU2VydmVyKHBhcnNlZERvdEVuc2ltZTogRG90RW5zaW1lLCBlbnNpbWVTZXJ2ZXJWZXJzaW9uOiBzdHJpbmcsIGNsYXNzcGF0aEZpbGU6IHN0cmluZywgd2hlblVwZGF0ZWQ6ICgpID0+IHZvaWQgKSB7XG4gICAgZG9VcGRhdGVTZXJ2ZXIoZG90RW5zaW1lLCBcIjAuOS4xMC1TTkFQU0hPVFwiLCBwYXRoLmpvaW4odGVtcERpciwgXCJjbGFzc3BhdGhmaWxlXCIpLCAoKSAtPiBkb25lKCkpXG4gICAgbG9nLnRyYWNlKCdyYW4gZG9VcGRhdGVTZXJ2ZXInKVxuICAgIFxuXG4gIGFmdGVyRWFjaCAtPlxuICAgIGphc21pbmUuREVGQVVMVF9USU1FT1VUX0lOVEVSVkFMID0gb3JpZ2luYWxUaW1lb3V0XG4gICAgdGVtcC5jbGVhbnVwU3luYygpXG4iXX0=
