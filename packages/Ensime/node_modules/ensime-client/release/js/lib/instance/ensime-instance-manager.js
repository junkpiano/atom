"use strict";
var _ = require('lodash');
/**
 * Takes care of mapping project roots to Ensime clients for multiple Ensime project support under same Atom window
 * This might be supported in vscode too, but currently isn't
 * # TODO: Should use sourdeDirs of .ensime to do mapping of files -> ensime instance
 */
var InstanceManager = (function () {
    function InstanceManager() {
        this.instances = [];
    }
    InstanceManager.prototype.registerInstance = function (instance) {
        this.instances.push(instance);
    };
    InstanceManager.prototype.stopInstance = function (dotEnsime) {
        for (var _i = 0, _a = this.instances; _i < _a.length; _i++) {
            var instance = _a[_i];
            if (instance.rootDir == dotEnsime.rootDir) {
                instance.destroy();
                this.instances = _.without(this.instances, instance);
            }
        }
    };
    // optional running ensime client of scala source path O(n)
    InstanceManager.prototype.instanceOfFile = function (path) {
        return _.find(this.instances, function (instance) {
            return _.startsWith(path, instance.dotEnsime.cacheDir) || instance.isSourceOf(path);
        });
    };
    InstanceManager.prototype.destroyAll = function () {
        _.forEach(this.instances, function (instance) { return instance.destroy(); });
    };
    InstanceManager.prototype.firstInstance = function () {
        return this.instances[0];
    };
    InstanceManager.prototype.isStarted = function (dotEnsimePath) {
        return _.some(this.instances, function (instance) { return instance.dotEnsime.dotEnsimePath == dotEnsimePath; });
    };
    return InstanceManager;
}());
exports.InstanceManager = InstanceManager;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pbnN0YW5jZS9lbnNpbWUtaW5zdGFuY2UtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBWSxDQUFDLFdBQU8sUUFDcEIsQ0FBQyxDQUQyQjtBQUk1Qjs7OztHQUlHO0FBQ0g7SUFJRTtRQUNJLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFBO0lBQ3ZCLENBQUM7SUFFRCwwQ0FBZ0IsR0FBaEIsVUFBaUIsUUFBMkI7UUFDeEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDakMsQ0FBQztJQUVELHNDQUFZLEdBQVosVUFBYSxTQUFvQjtRQUMvQixHQUFHLENBQUMsQ0FBbUIsVUFBYyxFQUFkLEtBQUEsSUFBSSxDQUFDLFNBQVMsRUFBZCxjQUFjLEVBQWQsSUFBYyxDQUFDO1lBQWpDLElBQU0sUUFBUSxTQUFBO1lBQ2pCLEVBQUUsQ0FBQSxDQUFDLFFBQVEsQ0FBQyxPQUFPLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ3pDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtnQkFDbEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUE7WUFDdEQsQ0FBQztTQUNGO0lBQ0gsQ0FBQztJQUVELDJEQUEyRDtJQUMzRCx3Q0FBYyxHQUFkLFVBQWUsSUFBWTtRQUN6QixNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFVBQUMsUUFBUTtZQUNyQyxPQUFBLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7UUFBNUUsQ0FBNEUsQ0FDN0UsQ0FBQTtJQUNILENBQUM7SUFFRCxvQ0FBVSxHQUFWO1FBQ0UsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFVBQUMsUUFBUSxJQUFLLE9BQUEsUUFBUSxDQUFDLE9BQU8sRUFBRSxFQUFsQixDQUFrQixDQUFDLENBQUE7SUFDN0QsQ0FBQztJQUVELHVDQUFhLEdBQWI7UUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUMxQixDQUFDO0lBRUQsbUNBQVMsR0FBVCxVQUFVLGFBQXFCO1FBQzdCLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsVUFBQyxRQUFRLElBQUssT0FBQSxRQUFRLENBQUMsU0FBUyxDQUFDLGFBQWEsSUFBSSxhQUFhLEVBQWpELENBQWlELENBQUMsQ0FBQTtJQUNoRyxDQUFDO0lBRUgsc0JBQUM7QUFBRCxDQXhDQSxBQXdDQyxJQUFBO0FBeENZLHVCQUFlLGtCQXdDM0IsQ0FBQSIsImZpbGUiOiJsaWIvaW5zdGFuY2UvZW5zaW1lLWluc3RhbmNlLW1hbmFnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBfICBmcm9tICdsb2Rhc2gnXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQge0RvdEVuc2ltZX0gZnJvbSAnLi4vdHlwZXMnXG5pbXBvcnQge0Vuc2ltZUluc3RhbmNlfSBmcm9tICcuL2luc3RhbmNlJ1xuLyoqXG4gKiBUYWtlcyBjYXJlIG9mIG1hcHBpbmcgcHJvamVjdCByb290cyB0byBFbnNpbWUgY2xpZW50cyBmb3IgbXVsdGlwbGUgRW5zaW1lIHByb2plY3Qgc3VwcG9ydCB1bmRlciBzYW1lIEF0b20gd2luZG93XG4gKiBUaGlzIG1pZ2h0IGJlIHN1cHBvcnRlZCBpbiB2c2NvZGUgdG9vLCBidXQgY3VycmVudGx5IGlzbid0XG4gKiAjIFRPRE86IFNob3VsZCB1c2Ugc291cmRlRGlycyBvZiAuZW5zaW1lIHRvIGRvIG1hcHBpbmcgb2YgZmlsZXMgLT4gZW5zaW1lIGluc3RhbmNlXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnN0YW5jZU1hbmFnZXI8VD4ge1xuXG4gIGluc3RhbmNlczogRW5zaW1lSW5zdGFuY2U8VD5bXVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5pbnN0YW5jZXMgPSBbXVxuICB9XG4gIFxuICByZWdpc3Rlckluc3RhbmNlKGluc3RhbmNlOiBFbnNpbWVJbnN0YW5jZTxUPikge1xuICAgICAgdGhpcy5pbnN0YW5jZXMucHVzaChpbnN0YW5jZSlcbiAgfVxuXG4gIHN0b3BJbnN0YW5jZShkb3RFbnNpbWU6IERvdEVuc2ltZSkge1xuICAgIGZvciAoY29uc3QgaW5zdGFuY2Ugb2YgdGhpcy5pbnN0YW5jZXMpIHtcbiAgICAgIGlmKGluc3RhbmNlLnJvb3REaXIgPT0gZG90RW5zaW1lLnJvb3REaXIpIHtcbiAgICAgICAgaW5zdGFuY2UuZGVzdHJveSgpXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzID0gXy53aXRob3V0KHRoaXMuaW5zdGFuY2VzLCBpbnN0YW5jZSlcbiAgICAgIH1cbiAgICB9IFxuICB9XG5cbiAgLy8gb3B0aW9uYWwgcnVubmluZyBlbnNpbWUgY2xpZW50IG9mIHNjYWxhIHNvdXJjZSBwYXRoIE8obilcbiAgaW5zdGFuY2VPZkZpbGUocGF0aDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIF8uZmluZCh0aGlzLmluc3RhbmNlcywgKGluc3RhbmNlKSA9PlxuICAgICAgXy5zdGFydHNXaXRoKHBhdGgsIGluc3RhbmNlLmRvdEVuc2ltZS5jYWNoZURpcikgfHwgaW5zdGFuY2UuaXNTb3VyY2VPZihwYXRoKVxuICAgIClcbiAgfVxuXG4gIGRlc3Ryb3lBbGwoKSB7XG4gICAgXy5mb3JFYWNoKHRoaXMuaW5zdGFuY2VzLCAoaW5zdGFuY2UpID0+IGluc3RhbmNlLmRlc3Ryb3koKSlcbiAgfVxuXG4gIGZpcnN0SW5zdGFuY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VzWzBdXG4gIH1cblxuICBpc1N0YXJ0ZWQoZG90RW5zaW1lUGF0aDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIF8uc29tZSh0aGlzLmluc3RhbmNlcywgKGluc3RhbmNlKSA9PiBpbnN0YW5jZS5kb3RFbnNpbWUuZG90RW5zaW1lUGF0aCA9PSBkb3RFbnNpbWVQYXRoKVxuICB9XG5cbn0iXX0=
