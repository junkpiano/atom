"use strict";
var fs = require('fs');
var path = require('path');
var loglevel = require('loglevel');
var _ = require('lodash');
var Promise = require('bluebird');
var log = loglevel.getLogger('ensime.startup');
var server_startup_utils_1 = require('./server-startup-utils');
// Start ensime server from given classpath file
function startServerFromFile(classpathFile, dotEnsime, ensimeServerVersion, ensimeServerFlags) {
    if (ensimeServerFlags === void 0) { ensimeServerFlags = ""; }
    log.debug('starting server from file');
    return new Promise(function (resolve, reject) {
        fs.readFile(classpathFile, { encoding: 'utf8' }, function (err, classpathFileContents) {
            if (err)
                reject(err);
            var classpathList = _.split(classpathFileContents, path.delimiter);
            var pid = server_startup_utils_1.startServerFromClasspath(classpathList, dotEnsime, ensimeServerVersion, ensimeServerFlags);
            pid.then(resolve);
        });
    });
}
exports.startServerFromFile = startServerFromFile;
function startServerFromAssemblyJar(assemblyJar, dotEnsime, ensimeServerVersion, ensimeServerFlags) {
    if (ensimeServerVersion === void 0) { ensimeServerVersion = "1.0.0"; }
    if (ensimeServerFlags === void 0) { ensimeServerFlags = ""; }
    var cp = [assemblyJar].concat(dotEnsime.compilerJars);
    return server_startup_utils_1.startServerFromClasspath(cp, dotEnsime, ensimeServerVersion, ensimeServerFlags);
}
exports.startServerFromAssemblyJar = startServerFromAssemblyJar;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zZXJ2ZXItc3RhcnR1cC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBWSxFQUFFLFdBQU0sSUFBSSxDQUFDLENBQUE7QUFDekIsSUFBWSxJQUFJLFdBQU0sTUFBTSxDQUFDLENBQUE7QUFDN0IsSUFBWSxRQUFRLFdBQU0sVUFBVSxDQUFDLENBQUE7QUFDckMsSUFBWSxDQUFDLFdBQU0sUUFBUSxDQUFDLENBQUE7QUFFNUIsSUFBWSxPQUFPLFdBQU0sVUFBVSxDQUFDLENBQUE7QUFFcEMsSUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBRWpELHFDQUF1Qyx3QkFBd0IsQ0FBQyxDQUFBO0FBR2hFLGdEQUFnRDtBQUNoRCw2QkFBb0MsYUFBcUIsRUFBRSxTQUFvQixFQUFFLG1CQUEyQixFQUFFLGlCQUFzQjtJQUF0QixpQ0FBc0IsR0FBdEIsc0JBQXNCO0lBQ2xJLEdBQUcsQ0FBQyxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQTtJQUN0QyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQWUsVUFBQyxPQUFPLEVBQUUsTUFBTTtRQUM3QyxFQUFFLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxFQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUMsRUFBRSxVQUFDLEdBQUcsRUFBRSxxQkFBcUI7WUFDeEUsRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDO2dCQUNMLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNkLElBQU0sYUFBYSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMscUJBQXFCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3JFLElBQU0sR0FBRyxHQUFHLCtDQUF3QixDQUFDLGFBQWEsRUFBRSxTQUFTLEVBQUUsbUJBQW1CLEVBQUUsaUJBQWlCLENBQUMsQ0FBQTtZQUN0RyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBWGUsMkJBQW1CLHNCQVdsQyxDQUFBO0FBRUQsb0NBQTJDLFdBQW1CLEVBQUUsU0FBb0IsRUFBRSxtQkFBcUMsRUFBRSxpQkFBc0I7SUFBN0QsbUNBQXFDLEdBQXJDLDZCQUFxQztJQUFFLGlDQUFzQixHQUF0QixzQkFBc0I7SUFDakosSUFBTSxFQUFFLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQ3ZELE1BQU0sQ0FBQywrQ0FBd0IsQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLG1CQUFtQixFQUFFLGlCQUFpQixDQUFDLENBQUE7QUFDeEYsQ0FBQztBQUhlLGtDQUEwQiw2QkFHekMsQ0FBQSIsImZpbGUiOiJsaWIvc2VydmVyLXN0YXJ0dXAvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgbG9nbGV2ZWwgZnJvbSAnbG9nbGV2ZWwnO1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHtEb3RFbnNpbWV9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0ICogYXMgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XG5cbmNvbnN0IGxvZyA9IGxvZ2xldmVsLmdldExvZ2dlcignZW5zaW1lLnN0YXJ0dXAnKTtcblxuaW1wb3J0IHtzdGFydFNlcnZlckZyb21DbGFzc3BhdGh9IGZyb20gJy4vc2VydmVyLXN0YXJ0dXAtdXRpbHMnO1xuaW1wb3J0IHtDaGlsZFByb2Nlc3N9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuXG4vLyBTdGFydCBlbnNpbWUgc2VydmVyIGZyb20gZ2l2ZW4gY2xhc3NwYXRoIGZpbGVcbmV4cG9ydCBmdW5jdGlvbiBzdGFydFNlcnZlckZyb21GaWxlKGNsYXNzcGF0aEZpbGU6IHN0cmluZywgZG90RW5zaW1lOiBEb3RFbnNpbWUsIGVuc2ltZVNlcnZlclZlcnNpb246IHN0cmluZywgZW5zaW1lU2VydmVyRmxhZ3MgPSBcIlwiKTogUHJvbWlzZUxpa2U8Q2hpbGRQcm9jZXNzPiB7ICBcbiAgbG9nLmRlYnVnKCdzdGFydGluZyBzZXJ2ZXIgZnJvbSBmaWxlJylcbiAgcmV0dXJuIG5ldyBQcm9taXNlPENoaWxkUHJvY2Vzcz4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZnMucmVhZEZpbGUoY2xhc3NwYXRoRmlsZSwge2VuY29kaW5nOiAndXRmOCd9LCAoZXJyLCBjbGFzc3BhdGhGaWxlQ29udGVudHMpID0+IHtcbiAgICAgICAgaWYoZXJyKSBcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgY29uc3QgY2xhc3NwYXRoTGlzdCA9IF8uc3BsaXQoY2xhc3NwYXRoRmlsZUNvbnRlbnRzLCBwYXRoLmRlbGltaXRlcik7XG4gICAgICAgIGNvbnN0IHBpZCA9IHN0YXJ0U2VydmVyRnJvbUNsYXNzcGF0aChjbGFzc3BhdGhMaXN0LCBkb3RFbnNpbWUsIGVuc2ltZVNlcnZlclZlcnNpb24sIGVuc2ltZVNlcnZlckZsYWdzKVxuICAgICAgICBwaWQudGhlbihyZXNvbHZlKTtcbiAgICAgIH0pXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRTZXJ2ZXJGcm9tQXNzZW1ibHlKYXIoYXNzZW1ibHlKYXI6IHN0cmluZywgZG90RW5zaW1lOiBEb3RFbnNpbWUsIGVuc2ltZVNlcnZlclZlcnNpb246IHN0cmluZyA9IFwiMS4wLjBcIiwgZW5zaW1lU2VydmVyRmxhZ3MgPSBcIlwiKSB7XG4gIGNvbnN0IGNwID0gW2Fzc2VtYmx5SmFyXS5jb25jYXQoZG90RW5zaW1lLmNvbXBpbGVySmFycylcbiAgcmV0dXJuIHN0YXJ0U2VydmVyRnJvbUNsYXNzcGF0aChjcCwgZG90RW5zaW1lLCBlbnNpbWVTZXJ2ZXJWZXJzaW9uLCBlbnNpbWVTZXJ2ZXJGbGFncylcbn1cbiJdfQ==
