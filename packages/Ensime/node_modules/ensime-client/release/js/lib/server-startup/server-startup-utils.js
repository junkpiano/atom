"use strict";
var path = require('path');
var _ = require('lodash');
var Promise = require('bluebird');
var child_process_1 = require('child_process');
var loglevel = require('loglevel');
var log = loglevel.getLogger('server-startup');
var fs = require('fs');
var file_utils_1 = require('../file-utils');
/**
* Sort monkeys and add tools.jar
*/
function fixClasspath(javaHome, classpathList) {
    var toolsJar = path.join(javaHome, 'lib', 'tools.jar');
    //Sort classpath so any jar containing monkey comes first
    var monkey = new RegExp('monkey');
    var sorter = function (jarPath) { return !monkey.test(jarPath); };
    classpathList.push(toolsJar);
    return _.sortBy(classpathList, sorter).join(path.delimiter);
}
exports.fixClasspath = fixClasspath;
/**
 *  Make an array of java command line args for spawn
 */
function javaArgsOf(classpath, dotEnsime, serverVersion, ensimeServerFlags) {
    if (serverVersion === void 0) { serverVersion = "1.0.0"; }
    if (ensimeServerFlags === void 0) { ensimeServerFlags = ""; }
    var args = ["-classpath", classpath, ("-Densime.config=" + dotEnsime.dotEnsimePath)];
    if (serverVersion <= "2") {
        args.push("-Densime.protocol=jerk");
    }
    if (ensimeServerFlags.length > 0) {
        args.push(ensimeServerFlags); // ## Weird, but extra " " broke everyting
    }
    args.push("org.ensime.server.Server");
    return args;
}
exports.javaArgsOf = javaArgsOf;
function javaCmdOf(dotEnsime) {
    return path.join(dotEnsime.javaHome, 'bin', 'java');
}
exports.javaCmdOf = javaCmdOf;
function spawnServer(javaCmd, args, detached) {
    if (detached === void 0) { detached = false; }
    return child_process_1.spawn(javaCmd, args, { detached: detached });
}
function logServer(pid, cacheDir) {
    fs.exists(cacheDir, function (exists) {
        if (exists) {
            var serverLog = fs.createWriteStream(path.join(cacheDir, "server.log"));
            pid.stdout.pipe(serverLog);
            pid.stderr.pipe(serverLog);
            return pid.stdin.end();
        }
        else {
            fs.mkdir(cacheDir, function (err) {
                return logServer(pid, cacheDir);
            });
        }
    });
}
function startServerFromClasspath(classpath, dotEnsime, serverVersion, serverFlags) {
    if (serverFlags === void 0) { serverFlags = ""; }
    return new Promise(function (resolve, reject) {
        var fixedClasspath = fixClasspath(dotEnsime.javaHome, classpath);
        var cmd = javaCmdOf(dotEnsime);
        var args = javaArgsOf(fixedClasspath, dotEnsime, serverVersion, serverFlags);
        log.debug("Starting Ensime server with " + cmd + " " + _.join(args, " "));
        file_utils_1.ensureExists(dotEnsime.cacheDir).then(function () {
            var pid = spawnServer(cmd, args);
            logServer(pid, dotEnsime.cacheDir);
            resolve(pid);
        });
    });
}
exports.startServerFromClasspath = startServerFromClasspath;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zZXJ2ZXItc3RhcnR1cC9zZXJ2ZXItc3RhcnR1cC11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBTyxJQUFJLFdBQVcsTUFBTSxDQUFDLENBQUM7QUFDOUIsSUFBTyxDQUFDLFdBQVcsUUFBUSxDQUFDLENBQUM7QUFDN0IsSUFBWSxPQUFPLFdBQU0sVUFBVSxDQUFDLENBQUE7QUFFcEMsOEJBQWtDLGVBQWUsQ0FBQyxDQUFBO0FBRWxELElBQU8sUUFBUSxXQUFXLFVBQVUsQ0FBQyxDQUFBO0FBQ3JDLElBQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtBQUNoRCxJQUFPLEVBQUUsV0FBVyxJQUFJLENBQUMsQ0FBQztBQUUxQiwyQkFBMkIsZUFLM0IsQ0FBQyxDQUx5QztBQUUxQzs7RUFFRTtBQUNGLHNCQUE2QixRQUFnQixFQUFFLGFBQXVCO0lBQ3BFLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQztJQUV6RCx5REFBeUQ7SUFDekQsSUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDbkMsSUFBTSxNQUFNLEdBQUcsVUFBQyxPQUFPLElBQUssT0FBQSxDQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQXRCLENBQXNCLENBQUE7SUFDbEQsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUM1QixNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUM3RCxDQUFDO0FBUmUsb0JBQVksZUFRM0IsQ0FBQTtBQUVEOztHQUVHO0FBQ0gsb0JBQTJCLFNBQWlCLEVBQUUsU0FBb0IsRUFBRSxhQUErQixFQUFFLGlCQUFzQjtJQUF2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RSxJQUFJLENBQUMsQ0FBQTtZQUNsQyxTQUFTLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUNsQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDZCxDQUFDLENBQUMsQ0FBQztJQUVMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQWRlLGdDQUF3QiwyQkFjdkMsQ0FBQSIsImZpbGUiOiJsaWIvc2VydmVyLXN0YXJ0dXAvc2VydmVyLXN0YXJ0dXAtdXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmltcG9ydCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5pbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gJ2JsdWViaXJkJztcblxuaW1wb3J0IHtDaGlsZFByb2Nlc3MsIHNwYXdufSBmcm9tICdjaGlsZF9wcm9jZXNzJztcblxuaW1wb3J0IGxvZ2xldmVsID0gcmVxdWlyZSgnbG9nbGV2ZWwnKVxuY29uc3QgbG9nID0gbG9nbGV2ZWwuZ2V0TG9nZ2VyKCdzZXJ2ZXItc3RhcnR1cCcpXG5pbXBvcnQgZnMgPSByZXF1aXJlKCdmcycpO1xuaW1wb3J0IHtEb3RFbnNpbWV9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7ZW5zdXJlRXhpc3RzfSBmcm9tICcuLi9maWxlLXV0aWxzJ1xuXG4vKipcbiogU29ydCBtb25rZXlzIGFuZCBhZGQgdG9vbHMuamFyXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGZpeENsYXNzcGF0aChqYXZhSG9tZTogc3RyaW5nLCBjbGFzc3BhdGhMaXN0OiBzdHJpbmdbXSkgeyAgXG4gIGNvbnN0IHRvb2xzSmFyID0gcGF0aC5qb2luKGphdmFIb21lLCAnbGliJywgJ3Rvb2xzLmphcicpO1xuICBcbiAgLy9Tb3J0IGNsYXNzcGF0aCBzbyBhbnkgamFyIGNvbnRhaW5pbmcgbW9ua2V5IGNvbWVzIGZpcnN0XG4gIGNvbnN0IG1vbmtleSA9IG5ldyBSZWdFeHAoJ21vbmtleScpXG4gIGNvbnN0IHNvcnRlciA9IChqYXJQYXRoKSA9PiAhIG1vbmtleS50ZXN0KGphclBhdGgpXG4gIGNsYXNzcGF0aExpc3QucHVzaCh0b29sc0phcilcbiAgcmV0dXJuIF8uc29ydEJ5KGNsYXNzcGF0aExpc3QsIHNvcnRlcikuam9pbihwYXRoLmRlbGltaXRlcilcbn1cbiAgXG4vKipcbiAqICBNYWtlIGFuIGFycmF5IG9mIGphdmEgY29tbWFuZCBsaW5lIGFyZ3MgZm9yIHNwYXduXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBqYXZhQXJnc09mKGNsYXNzcGF0aDogc3RyaW5nLCBkb3RFbnNpbWU6IERvdEVuc2ltZSwgc2VydmVyVmVyc2lvbjogc3RyaW5nID0gXCIxLjAuMFwiLCBlbnNpbWVTZXJ2ZXJGbGFncyA9IFwiXCIpIHtcbiAgY29uc3QgYXJncyA9IFtcIi1jbGFzc3BhdGhcIiwgY2xhc3NwYXRoLCBgLURlbnNpbWUuY29uZmlnPSR7ZG90RW5zaW1lLmRvdEVuc2ltZVBhdGh9YF1cbiAgXG4gIGlmKHNlcnZlclZlcnNpb24gPD0gXCIyXCIpIHtcbiAgICBhcmdzLnB1c2goXCItRGVuc2ltZS5wcm90b2NvbD1qZXJrXCIpXG4gIH1cblxuICBpZihlbnNpbWVTZXJ2ZXJGbGFncy5sZW5ndGggPiAwKSB7XG4gICAgYXJncy5wdXNoKGVuc2ltZVNlcnZlckZsYWdzKSAvLyAjIyBXZWlyZCwgYnV0IGV4dHJhIFwiIFwiIGJyb2tlIGV2ZXJ5dGluZ1xuICB9IFxuICBcbiAgYXJncy5wdXNoKFwib3JnLmVuc2ltZS5zZXJ2ZXIuU2VydmVyXCIpXG4gIHJldHVybiBhcmdzXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBqYXZhQ21kT2YoZG90RW5zaW1lOiBEb3RFbnNpbWUpIHtcbiAgcmV0dXJuIHBhdGguam9pbihkb3RFbnNpbWUuamF2YUhvbWUsICdiaW4nLCAnamF2YScpXG59IFxuXG5mdW5jdGlvbiBzcGF3blNlcnZlcihqYXZhQ21kOiBzdHJpbmcsIGFyZ3M6IHN0cmluZ1tdLCBkZXRhY2hlZCA9IGZhbHNlKSB7XG4gIHJldHVybiBzcGF3bihqYXZhQ21kLCBhcmdzLCB7ZGV0YWNoZWQ6IGRldGFjaGVkfSlcbn1cbiAgXG5mdW5jdGlvbiBsb2dTZXJ2ZXIocGlkLCBjYWNoZURpcikge1xuIGZzLmV4aXN0cyhjYWNoZURpciwgKGV4aXN0cykgPT4ge1xuICAgIGlmKGV4aXN0cykge1xuICAgICAgY29uc3Qgc2VydmVyTG9nID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0ocGF0aC5qb2luKGNhY2hlRGlyLCBcInNlcnZlci5sb2dcIikpXG4gICAgICBwaWQuc3Rkb3V0LnBpcGUoc2VydmVyTG9nKVxuICAgICAgcGlkLnN0ZGVyci5waXBlKHNlcnZlckxvZylcbiAgICAgIHJldHVybiBwaWQuc3RkaW4uZW5kKClcbiAgICB9IGVsc2Uge1xuICAgICAgZnMubWtkaXIoY2FjaGVEaXIsIChlcnIpID0+IHtcbiAgICAgICAgcmV0dXJuIGxvZ1NlcnZlcihwaWQsIGNhY2hlRGlyKTtcbiAgICAgIH0pO1xuICAgIH1cbiB9KTtcbn1cblxuXG5cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0U2VydmVyRnJvbUNsYXNzcGF0aChjbGFzc3BhdGg6IHN0cmluZ1tdLCBkb3RFbnNpbWU6IERvdEVuc2ltZSwgc2VydmVyVmVyc2lvbjogc3RyaW5nLCBzZXJ2ZXJGbGFncyA9IFwiXCIpIDogUHJvbWlzZUxpa2U8Q2hpbGRQcm9jZXNzPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZTxDaGlsZFByb2Nlc3M+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBmaXhlZENsYXNzcGF0aCA9IGZpeENsYXNzcGF0aChkb3RFbnNpbWUuamF2YUhvbWUsIGNsYXNzcGF0aClcbiAgICBjb25zdCBjbWQgPSBqYXZhQ21kT2YoZG90RW5zaW1lKVxuICAgIGNvbnN0IGFyZ3MgPSBqYXZhQXJnc09mKGZpeGVkQ2xhc3NwYXRoLCBkb3RFbnNpbWUsIHNlcnZlclZlcnNpb24sIHNlcnZlckZsYWdzKVxuICAgIGxvZy5kZWJ1ZyhgU3RhcnRpbmcgRW5zaW1lIHNlcnZlciB3aXRoICR7Y21kfSAke18uam9pbihhcmdzLCBcIiBcIil9YClcblxuICAgIGVuc3VyZUV4aXN0cyhkb3RFbnNpbWUuY2FjaGVEaXIpLnRoZW4oICgpID0+IHtcbiAgICAgIGNvbnN0IHBpZCA9IHNwYXduU2VydmVyKGNtZCwgYXJncylcbiAgICAgIGxvZ1NlcnZlcihwaWQsIGRvdEVuc2ltZS5jYWNoZURpcilcbiAgICAgIHJlc29sdmUocGlkKVxuICAgIH0pO1xuXG4gIH0pO1xufSJdfQ==
