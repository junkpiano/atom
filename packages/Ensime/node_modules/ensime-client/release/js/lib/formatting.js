"use strict";
var _ = require('lodash');
var functionMatcher = new RegExp("scala\\.Function\\d{1,2}");
var scalaPackageMatcher = new RegExp("scala\\.([\\s\\S]*)");
var refinementMatcher = new RegExp("(.*)\\$<refinement>"); // scalaz.syntax.ApplyOps$<refinement>
var tupleMatcher = /^\(.*\)/;
exports.fixQualifiedTypeName = function (theType) {
    var refinementMatch = refinementMatcher.exec(theType.fullName);
    if (refinementMatch)
        return refinementMatch[1];
    else
        return theType.fullName;
};
function fixShortTypeName(theType) {
    var refinementMatch = refinementMatcher.exec(theType.fullName);
    if (refinementMatch)
        return _.last(_.split(theType.fullName, "."));
    else
        return typeConstructorFromName(theType.name);
}
exports.fixShortTypeName = fixShortTypeName;
function typeConstructorFromType(type) {
    return typeConstructorFromName(type.name);
}
exports.typeConstructorFromType = typeConstructorFromType;
function typeConstructorFromName(name) {
    return _.replace(name, /\[.*\]/, "");
}
exports.typeConstructorFromName = typeConstructorFromName;
// # For hover
// # typeNameFormatter: function from {name, fullName} -> Html/String
exports.formatTypeWith = function (typeNameFormatter) { return function (theType) {
    function recur(theType) {
        var formatParam = function (param) {
            var type = recur(param[1]);
            return param[0] + ": " + type;
        };
        var formatParamSection = function (paramSection) {
            var p = paramSection.params.map(formatParam);
            return p.join(", ");
        };
        var formatParamSections = function (paramSections) {
            var sections = paramSections.map(formatParamSection);
            return "(" + sections.join(")(") + ")";
        };
        var formatBasicType = function (theType) {
            var name = typeNameFormatter(theType);
            var typeArgs = theType.typeArgs;
            if (!typeArgs || typeArgs.length == 0)
                return name;
            else {
                var formattedTypeArgs = typeArgs.map(recur);
                if (theType.fullName == 'scala.<byname>')
                    return "=> " + formattedTypeArgs.join(", ");
                else if (theType.fullName == 'scala.<repeated>')
                    return formattedTypeArgs.join(", ") + "*";
                else if (theType.fullName == "scala.Function1") {
                    var i = formattedTypeArgs[0];
                    var o = formattedTypeArgs[1];
                    return i + " => " + o;
                }
                else if (functionMatcher.test(theType.fullName)) {
                    var result = _.last(formattedTypeArgs);
                    var params = _.initial(formattedTypeArgs);
                    return "(" + params.join(", ") + ") => " + result;
                }
                else if (tupleMatcher.test(theType.name)) {
                    return "(" + formattedTypeArgs.join(", ") + ")";
                }
                else
                    return name + ("[" + formattedTypeArgs.join(", ") + "]");
            }
        };
        if (theType.typehint === "ArrowTypeInfo")
            return formatParamSections(theType.paramSections) + ": " + recur(theType.resultType);
        else if (theType.typehint === "BasicTypeInfo")
            return formatBasicType(theType);
    }
    return recur(theType);
}; };
function formatImplicitInfo(info) {
    if (info.typehint == 'ImplicitParamInfo') {
        var implicitParamInfo = info;
        return "Implicit parameters added to call of " + implicitParamInfo.fun.localName + ": (" + _.map(implicitParamInfo.params, function (p) { return p.localName; }).join(", ") + ")";
    }
    else if (info.typehint == 'ImplicitConversionInfo') {
        var implicitConversionInfo = info;
        return "Implicit conversion: " + implicitConversionInfo.fun.localName;
    }
}
exports.formatImplicitInfo = formatImplicitInfo;
exports.formatType = exports.formatTypeWith(typeConstructorFromType);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
