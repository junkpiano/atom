"use strict";
var lisp = require('./lisp/lisp');
var _ = require('lodash');
var Promise = require('bluebird');
var glob = require('glob');
var swankExtras = require('./lisp/swank-extras');
var sexpToJObject = swankExtras.sexpToJObject;
var file_utils_1 = require('./file-utils');
function readDotEnsime(path) {
    return file_utils_1.readFile(path).then(function (raw) {
        var rows = raw.toString().split(new RegExp("\r?\n"));
        var filtered = rows.filter(function (l) { return l.indexOf(';;') != 0; });
        return filtered.join('\n');
    });
}
function parseDotEnsime(path) {
    // scala version from .ensime config file of project
    return readDotEnsime(path).then(function (dotEnsime) {
        var dotEnsimeLisp = lisp.readFromString(dotEnsime);
        var dotEnsimeJs = sexpToJObject(dotEnsimeLisp);
        var subprojects = dotEnsimeJs[':subprojects'];
        var sourceRoots = _.flattenDeep(_.map(subprojects, function (sp) { return sp[':source-roots']; }));
        var scalaVersion = dotEnsimeJs[':scala-version'];
        var scalaEdition = scalaVersion.substring(0, 4);
        return {
            name: dotEnsimeJs[':name'],
            scalaVersion: scalaVersion,
            scalaEdition: scalaEdition,
            javaHome: dotEnsimeJs[':java-home'],
            javaFlags: dotEnsimeJs[':java-flags'],
            rootDir: dotEnsimeJs[':root-dir'],
            cacheDir: dotEnsimeJs[':cache-dir'],
            compilerJars: dotEnsimeJs[':scala-compiler-jars'],
            dotEnsimePath: path,
            sourceRoots: sourceRoots
        };
    });
}
exports.parseDotEnsime = parseDotEnsime;
// Gives promise of .ensime paths
function allDotEnsimesInPaths(paths) {
    var globTask = Promise.promisify(glob);
    var promises = paths.map(function (dir) {
        return globTask('.ensime', {
            cwd: dir,
            matchBase: true,
            nodir: true,
            realpath: true,
            ignore: '**/{node_modules,.ensime_cache,.git,target,.idea}/**'
        });
    });
    var promise = Promise.all(promises);
    var result = promise.then(function (dotEnsimesUnflattened) {
        var thang = _.flattenDeep(dotEnsimesUnflattened);
        function toObj(path) {
            return { path: path };
        }
        return thang.map(toObj);
    });
    return result;
}
exports.allDotEnsimesInPaths = allDotEnsimesInPaths;
function dotEnsimesFilter(path, stats) {
    !stats.isDirectory() && !_.endsWith(path, '.ensime');
}
exports.dotEnsimesFilter = dotEnsimesFilter;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUk7WUFDWCxRQUFRLEVBQUUsSUFBSTtZQUNkLE1BQU0sRUFBRSxzREFBc0Q7U0FDL0QsQ0FBQztJQVBKLENBT0ksQ0FDTCxDQUFBO0lBQ0QsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNyQyxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQUMscUJBQXFCO1FBQ2hELElBQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQVMscUJBQXFCLENBQUMsQ0FBQztRQUMzRCxlQUFlLElBQVk7WUFDekIsTUFBTSxDQUFDLEVBQUMsSUFBSSxFQUFXLElBQUksRUFBQyxDQUFBO1FBQzlCLENBQUM7UUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN6QixDQUFDLENBQUMsQ0FBQTtJQUNGLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQXJCZSw0QkFBb0IsdUJBcUJuQyxDQUFBO0FBRUQsMEJBQWlDLElBQVksRUFBRSxLQUFVO0lBQ3ZELENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUE7QUFDdkQsQ0FBQztBQUZlLHdCQUFnQixtQkFFL0IsQ0FBQSIsImZpbGUiOiJsaWIvZG90ZW5zaW1lLXV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmltcG9ydCBsaXNwID0gcmVxdWlyZSAoJy4vbGlzcC9saXNwJyk7XG5pbXBvcnQgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuaW1wb3J0ICogYXMgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgZ2xvYiA9IHJlcXVpcmUoJ2dsb2InKTtcbmltcG9ydCBzd2Fua0V4dHJhcyA9IHJlcXVpcmUoJy4vbGlzcC9zd2Fuay1leHRyYXMnKVxuaW1wb3J0IHtzcGF3bn0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQge0RvdEVuc2ltZX0gZnJvbSAnLi90eXBlcyc7XG5jb25zdCBzZXhwVG9KT2JqZWN0ID0gc3dhbmtFeHRyYXMuc2V4cFRvSk9iamVjdFxuaW1wb3J0IHtyZWFkRmlsZX0gZnJvbSAnLi9maWxlLXV0aWxzJztcblxuZnVuY3Rpb24gcmVhZERvdEVuc2ltZShwYXRoOiBzdHJpbmcpIDogUHJvbWlzZUxpa2U8c3RyaW5nPiB7XG4gIFxuICByZXR1cm4gcmVhZEZpbGUocGF0aCkudGhlbigocmF3KSA9PiB7XG4gICAgY29uc3Qgcm93cyA9IHJhdy50b1N0cmluZygpLnNwbGl0KG5ldyBSZWdFeHAoXCJcXHI/XFxuXCIpKVxuICAgIGNvbnN0IGZpbHRlcmVkID0gcm93cy5maWx0ZXIoKGwpID0+IGwuaW5kZXhPZignOzsnKSAhPSAwKVxuICAgIHJldHVybiBmaWx0ZXJlZC5qb2luKCdcXG4nKVxuICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VEb3RFbnNpbWUocGF0aDogc3RyaW5nKSA6IFByb21pc2VMaWtlPERvdEVuc2ltZT4ge1xuICAvLyBzY2FsYSB2ZXJzaW9uIGZyb20gLmVuc2ltZSBjb25maWcgZmlsZSBvZiBwcm9qZWN0XG4gIHJldHVybiByZWFkRG90RW5zaW1lKHBhdGgpLnRoZW4oKGRvdEVuc2ltZSkgPT4ge1xuXG4gICAgY29uc3QgZG90RW5zaW1lTGlzcCA9IGxpc3AucmVhZEZyb21TdHJpbmcoZG90RW5zaW1lKVxuICAgIGNvbnN0IGRvdEVuc2ltZUpzID0gc2V4cFRvSk9iamVjdChkb3RFbnNpbWVMaXNwKVxuICAgIGNvbnN0IHN1YnByb2plY3RzID0gZG90RW5zaW1lSnNbJzpzdWJwcm9qZWN0cyddXG4gICAgY29uc3Qgc291cmNlUm9vdHMgPSBfLmZsYXR0ZW5EZWVwKF8ubWFwKHN1YnByb2plY3RzLCAoc3ApID0+IHNwWyc6c291cmNlLXJvb3RzJ10pKVxuICAgIGNvbnN0IHNjYWxhVmVyc2lvbiA9IGRvdEVuc2ltZUpzWyc6c2NhbGEtdmVyc2lvbiddXG4gICAgY29uc3Qgc2NhbGFFZGl0aW9uID0gc2NhbGFWZXJzaW9uLnN1YnN0cmluZygwLCA0KVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IDxzdHJpbmc+IGRvdEVuc2ltZUpzWyc6bmFtZSddLFxuICAgICAgc2NhbGFWZXJzaW9uOiA8c3RyaW5nPiBzY2FsYVZlcnNpb24sXG4gICAgICBzY2FsYUVkaXRpb246IDxzdHJpbmc+IHNjYWxhRWRpdGlvbixcbiAgICAgIGphdmFIb21lOiA8c3RyaW5nPiBkb3RFbnNpbWVKc1snOmphdmEtaG9tZSddLFxuICAgICAgamF2YUZsYWdzOiA8c3RyaW5nPiBkb3RFbnNpbWVKc1snOmphdmEtZmxhZ3MnXSxcbiAgICAgIHJvb3REaXI6IDxzdHJpbmc+IGRvdEVuc2ltZUpzWyc6cm9vdC1kaXInXSxcbiAgICAgIGNhY2hlRGlyOiA8c3RyaW5nPiBkb3RFbnNpbWVKc1snOmNhY2hlLWRpciddLFxuICAgICAgY29tcGlsZXJKYXJzOiA8c3RyaW5nPiBkb3RFbnNpbWVKc1snOnNjYWxhLWNvbXBpbGVyLWphcnMnXSxcbiAgICAgIGRvdEVuc2ltZVBhdGg6IDxzdHJpbmc+IHBhdGgsXG4gICAgICBzb3VyY2VSb290czogIDxbc3RyaW5nXT4gc291cmNlUm9vdHNcbiAgICB9O1xuICB9KTsgXG59XG5cbi8vIEdpdmVzIHByb21pc2Ugb2YgLmVuc2ltZSBwYXRoc1xuZXhwb3J0IGZ1bmN0aW9uIGFsbERvdEVuc2ltZXNJblBhdGhzKHBhdGhzOiBbc3RyaW5nXSk6IFByb21pc2VMaWtlPHtwYXRoOiBzdHJpbmd9W10+IHtcbiAgY29uc3QgZ2xvYlRhc2sgPSBQcm9taXNlLnByb21pc2lmeTxbc3RyaW5nXSwgc3RyaW5nLCB7fT4oZ2xvYilcbiAgY29uc3QgcHJvbWlzZXMgPSBwYXRocy5tYXAgKChkaXIpID0+XG4gICAgZ2xvYlRhc2soXG4gICAgICAnLmVuc2ltZScsIHtcbiAgICAgICAgY3dkOiBkaXIsXG4gICAgICAgIG1hdGNoQmFzZTogdHJ1ZSxcbiAgICAgICAgbm9kaXI6IHRydWUsXG4gICAgICAgIHJlYWxwYXRoOiB0cnVlLFxuICAgICAgICBpZ25vcmU6ICcqKi97bm9kZV9tb2R1bGVzLC5lbnNpbWVfY2FjaGUsLmdpdCx0YXJnZXQsLmlkZWF9LyoqJyAgXG4gICAgICB9KVxuICApXG4gIGNvbnN0IHByb21pc2UgPSBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgY29uc3QgcmVzdWx0ID0gcHJvbWlzZS50aGVuKChkb3RFbnNpbWVzVW5mbGF0dGVuZWQpID0+IHtcbiAgICBjb25zdCB0aGFuZyA9IF8uZmxhdHRlbkRlZXA8c3RyaW5nPihkb3RFbnNpbWVzVW5mbGF0dGVuZWQpO1xuICAgIGZ1bmN0aW9uIHRvT2JqKHBhdGg6IHN0cmluZykge1xuICAgICAgcmV0dXJuIHtwYXRoOiA8c3RyaW5nPiBwYXRofVxuICAgIH1cbiAgICByZXR1cm4gdGhhbmcubWFwKHRvT2JqKVxuICB9KVxuICByZXR1cm4gcmVzdWx0O1xufVxuICBcbmV4cG9ydCBmdW5jdGlvbiBkb3RFbnNpbWVzRmlsdGVyKHBhdGg6IHN0cmluZywgc3RhdHM6IGFueSkge1xuICAhc3RhdHMuaXNEaXJlY3RvcnkoKSAmJiAhIF8uZW5kc1dpdGgocGF0aCwgJy5lbnNpbWUnKVxufVxuIl19
