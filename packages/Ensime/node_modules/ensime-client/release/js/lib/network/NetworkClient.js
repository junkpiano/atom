"use strict";
var loglevel = require('loglevel');
var WebSocket = require("ws");
var TcpClient = (function () {
    function TcpClient() {
    }
    TcpClient.prototype.destroy = function () {
    };
    TcpClient.prototype.send = function (msg) {
    };
    return TcpClient;
}());
exports.TcpClient = TcpClient;
var WebsocketClient = (function () {
    function WebsocketClient(httpPort, onConnected, onMsg, serverVersion) {
        if (serverVersion === void 0) { serverVersion = "1.0"; }
        var log = loglevel.getLogger('ensime-client');
        // Since 2.0
        if (serverVersion && serverVersion >= "2")
            this.websocket = new WebSocket("ws://localhost:" + httpPort + "/websocket", ["jerky"]);
        else
            this.websocket = new WebSocket("ws://localhost:" + httpPort + "/jerky");
        this.websocket.on("open", function () {
            log.debug("connecting websocketâ€¦");
            onConnected();
        });
        this.websocket.on("message", function (msg) {
            log.debug("incoming: " + msg);
            onMsg(msg);
        });
        this.websocket.on("error", function (error) {
            log.error(error);
        });
        this.websocket.on("close", function () {
            log.debug("websocket closed from server");
        });
    }
    WebsocketClient.prototype.destroy = function () {
        this.websocket.terminate();
    };
    WebsocketClient.prototype.send = function (msg) {
        this.websocket.send(msg);
    };
    return WebsocketClient;
}());
exports.WebsocketClient = WebsocketClient;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9uZXR3b3JrL05ldHdvcmtDbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQU8sUUFBUSxXQUFXLFVBQVUsQ0FBQyxDQUFDO0FBQ3RDLElBQVksU0FBUyxXQUFNLElBQUksQ0FBQyxDQUFBO0FBUWhDO0lBQUE7SUFPQSxDQUFDO0lBTkcsMkJBQU8sR0FBUDtJQUNBLENBQUM7SUFFRCx3QkFBSSxHQUFKLFVBQUssR0FBVztJQUVoQixDQUFDO0lBQ0wsZ0JBQUM7QUFBRCxDQVBBLEFBT0MsSUFBQTtBQVBZLGlCQUFTLFlBT3JCLENBQUE7QUFFRDtJQUdJLHlCQUFZLFFBQWdCLEVBQUUsV0FBc0IsRUFBRSxLQUEyQixFQUFFLGFBQTZCO1FBQTdCLDZCQUE2QixHQUE3QixxQkFBNkI7UUFDNUcsSUFBSSxHQUFHLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUU5QyxZQUFZO1FBQ1osRUFBRSxDQUFBLENBQUMsYUFBYSxJQUFJLGFBQWEsSUFBSSxHQUFHLENBQUM7WUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxpQkFBaUIsR0FBRyxRQUFRLEdBQUcsWUFBWSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtRQUMxRixJQUFJO1lBQ0EsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxpQkFBaUIsR0FBRyxRQUFRLEdBQUcsUUFBUSxDQUFDLENBQUM7UUFFNUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFO1lBQ3RCLEdBQUcsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztZQUNuQyxXQUFXLEVBQUUsQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxVQUFDLEdBQUc7WUFDN0IsR0FBRyxDQUFDLEtBQUssQ0FBQyxlQUFhLEdBQUssQ0FBQyxDQUFBO1lBQzdCLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNmLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQUMsS0FBSztZQUM3QixHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFO1lBQ3ZCLEdBQUcsQ0FBQyxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FBQztJQUVQLENBQUM7SUFFRCxpQ0FBTyxHQUFQO1FBQ0UsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQTtJQUM1QixDQUFDO0lBRUQsOEJBQUksR0FBSixVQUFLLEdBQVc7UUFDWixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUM1QixDQUFDO0lBRUwsc0JBQUM7QUFBRCxDQXhDQSxBQXdDQyxJQUFBO0FBeENZLHVCQUFlLGtCQXdDM0IsQ0FBQSIsImZpbGUiOiJsaWIvbmV0d29yay9OZXR3b3JrQ2xpZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZ2xldmVsID0gcmVxdWlyZSgnbG9nbGV2ZWwnKTtcbmltcG9ydCAqIGFzIFdlYlNvY2tldCBmcm9tIFwid3NcIjtcblxuXG5leHBvcnQgaW50ZXJmYWNlIE5ldHdvcmtDbGllbnQge1xuICAgIGRlc3Ryb3koKTogYW55XG4gICAgc2VuZChtc2c6IHN0cmluZyk6IGFueVxufVxuXG5leHBvcnQgY2xhc3MgVGNwQ2xpZW50IGltcGxlbWVudHMgTmV0d29ya0NsaWVudCB7XG4gICAgZGVzdHJveSgpIHtcbiAgICB9XG4gICAgXG4gICAgc2VuZChtc2c6IHN0cmluZyk6IGFueSB7XG4gICAgICAgIFxuICAgIH1cbn1cbiAgXG5leHBvcnQgY2xhc3MgV2Vic29ja2V0Q2xpZW50IGltcGxlbWVudHMgTmV0d29ya0NsaWVudCB7XG4gICAgd2Vic29ja2V0OiBXZWJTb2NrZXRcblxuICAgIGNvbnN0cnVjdG9yKGh0dHBQb3J0OiBzdHJpbmcsIG9uQ29ubmVjdGVkOiAoKSA9PiBhbnksIG9uTXNnOiAobXNnOiBzdHJpbmcpID0+IGFueSwgc2VydmVyVmVyc2lvbjogc3RyaW5nID0gXCIxLjBcIikge1xuICAgICAgICBsZXQgbG9nID0gbG9nbGV2ZWwuZ2V0TG9nZ2VyKCdlbnNpbWUtY2xpZW50Jyk7XG4gICAgICAgIFxuICAgICAgICAvLyBTaW5jZSAyLjBcbiAgICAgICAgaWYoc2VydmVyVmVyc2lvbiAmJiBzZXJ2ZXJWZXJzaW9uID49IFwiMlwiKVxuICAgICAgICAgICAgdGhpcy53ZWJzb2NrZXQgPSBuZXcgV2ViU29ja2V0KFwid3M6Ly9sb2NhbGhvc3Q6XCIgKyBodHRwUG9ydCArIFwiL3dlYnNvY2tldFwiLCBbXCJqZXJreVwiXSlcbiAgICAgICAgZWxzZSBcbiAgICAgICAgICAgIHRoaXMud2Vic29ja2V0ID0gbmV3IFdlYlNvY2tldChcIndzOi8vbG9jYWxob3N0OlwiICsgaHR0cFBvcnQgKyBcIi9qZXJreVwiKTtcbiAgICBcbiAgICAgICAgdGhpcy53ZWJzb2NrZXQub24oXCJvcGVuXCIsICgpID0+IHtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyhcImNvbm5lY3Rpbmcgd2Vic29ja2V04oCmXCIpO1xuICAgICAgICAgICAgb25Db25uZWN0ZWQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy53ZWJzb2NrZXQub24oXCJtZXNzYWdlXCIsIChtc2cpID0+IHtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyhgaW5jb21pbmc6ICR7bXNnfWApXG4gICAgICAgICAgICBvbk1zZyhtc2cpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLndlYnNvY2tldC5vbihcImVycm9yXCIsIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgbG9nLmVycm9yKGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLndlYnNvY2tldC5vbihcImNsb3NlXCIsICgpID0+IHtcbiAgICAgICAgICAgIGxvZy5kZWJ1ZyhcIndlYnNvY2tldCBjbG9zZWQgZnJvbSBzZXJ2ZXJcIik7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIHRoaXMud2Vic29ja2V0LnRlcm1pbmF0ZSgpXG4gICAgfVxuICAgIFxuICAgIHNlbmQobXNnOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy53ZWJzb2NrZXQuc2VuZChtc2cpXG4gICAgfVxuICAgIFxufSJdfQ==
