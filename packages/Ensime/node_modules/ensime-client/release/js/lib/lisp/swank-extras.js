(function() {
  var arrToJObject, fromLisp, sexpToJObject, typeIsArray;

  fromLisp = require('./lisp').fromLisp;

  typeIsArray = function(value) {
    return value && typeof value === 'object' && value instanceof Array && typeof value.length === 'number' && typeof value.splice === 'function' && !(value.propertyIsEnumerable('length'));
  };

  arrToJObject = function(x) {
    var firstElem, parseArray, parseObject;
    parseObject = function(obj) {
      var keyValue, result;
      if ((obj == null) || obj.length === 0) {
        return {};
      } else {
        keyValue = obj.splice(0, 2);
        result = parseObject(obj);
        result[keyValue[0]] = arrToJObject(keyValue[1]);
        return result;
      }
    };
    parseArray = function(arr) {
      var elem, i, len, results;
      results = [];
      for (i = 0, len = arr.length; i < len; i++) {
        elem = arr[i];
        results.push(arrToJObject(elem));
      }
      return results;
    };
    if (typeIsArray(x)) {
      firstElem = x[0];
      if (typeof firstElem === 'string' && firstElem.startsWith(":")) {
        return parseObject(x);
      } else {
        return parseArray(x);
      }
    } else {
      return x;
    }
  };

  sexpToJObject = function(msg) {
    var arr;
    arr = fromLisp(msg);
    return arrToJObject(arr);
  };

  module.exports = {
    sexpToJObject: sexpToJObject,
    arrToJObject: arrToJObject
  };

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGliL2xpc3Avc3dhbmstZXh0cmFzLmpzIiwic291cmNlcyI6WyJsaWIvbGlzcC9zd2Fuay1leHRyYXMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0FBQUEsTUFBQTs7RUFBQyxXQUFZLE9BQUEsQ0FBUSxRQUFSOztFQUViLFdBQUEsR0FBYyxTQUFDLEtBQUQ7V0FDWixLQUFBLElBQ0UsT0FBTyxLQUFQLEtBQWdCLFFBRGxCLElBRUUsS0FBQSxZQUFpQixLQUZuQixJQUdFLE9BQU8sS0FBSyxDQUFDLE1BQWIsS0FBdUIsUUFIekIsSUFJRSxPQUFPLEtBQUssQ0FBQyxNQUFiLEtBQXVCLFVBSnpCLElBS0UsQ0FBSSxDQUFFLEtBQUssQ0FBQyxvQkFBTixDQUEyQixRQUEzQixDQUFGO0VBTk07O0VBUWQsWUFBQSxHQUFlLFNBQUMsQ0FBRDtBQUViLFFBQUE7SUFBQSxXQUFBLEdBQWMsU0FBQyxHQUFEO0FBQ1osVUFBQTtNQUFBLElBQU8sYUFBSixJQUFZLEdBQUcsQ0FBQyxNQUFKLEtBQWMsQ0FBN0I7ZUFDRSxHQURGO09BQUEsTUFBQTtRQUdFLFFBQUEsR0FBVyxHQUFHLENBQUMsTUFBSixDQUFXLENBQVgsRUFBYyxDQUFkO1FBQ1gsTUFBQSxHQUFTLFdBQUEsQ0FBWSxHQUFaO1FBQ1QsTUFBTyxDQUFBLFFBQVMsQ0FBQSxDQUFBLENBQVQsQ0FBUCxHQUFzQixZQUFBLENBQWEsUUFBUyxDQUFBLENBQUEsQ0FBdEI7ZUFDdEIsT0FORjs7SUFEWTtJQVNkLFVBQUEsR0FBYSxTQUFDLEdBQUQ7QUFDWCxVQUFBO0FBQUE7V0FBQSxxQ0FBQTs7cUJBQUEsWUFBQSxDQUFhLElBQWI7QUFBQTs7SUFEVztJQUdiLElBQUcsV0FBQSxDQUFZLENBQVosQ0FBSDtNQUNFLFNBQUEsR0FBWSxDQUFFLENBQUEsQ0FBQTtNQUVkLElBQUcsT0FBTyxTQUFQLEtBQW9CLFFBQXBCLElBQWdDLFNBQVMsQ0FBQyxVQUFWLENBQXFCLEdBQXJCLENBQW5DO2VBRUUsV0FBQSxDQUFZLENBQVosRUFGRjtPQUFBLE1BQUE7ZUFJRSxVQUFBLENBQVcsQ0FBWCxFQUpGO09BSEY7S0FBQSxNQUFBO2FBU0UsRUFURjs7RUFkYTs7RUEwQmYsYUFBQSxHQUFnQixTQUFDLEdBQUQ7QUFDZCxRQUFBO0lBQUEsR0FBQSxHQUFNLFFBQUEsQ0FBUyxHQUFUO1dBQ04sWUFBQSxDQUFhLEdBQWI7RUFGYzs7RUFLaEIsTUFBTSxDQUFDLE9BQVAsR0FBaUI7SUFDZixlQUFBLGFBRGU7SUFFZixjQUFBLFlBRmU7O0FBekNqQiIsInNvdXJjZXNDb250ZW50IjpbIiMgU29tZSBwYXJzaW5nIHV0aWxpdGllcywgcHJvcGJhYmx5IGJ1Z2d5IGFzIGhlbGwsIGJ1dCB3b3JrcyBmb3IgdGhlIHVzZSBjYXNlcyBJJ3ZlIHNlZW4gc28gZmFyXG57ZnJvbUxpc3B9ID0gcmVxdWlyZSAnLi9saXNwJ1xuXG50eXBlSXNBcnJheSA9ICh2YWx1ZSkgLT5cbiAgdmFsdWUgYW5kXG4gICAgdHlwZW9mIHZhbHVlIGlzICdvYmplY3QnIGFuZFxuICAgIHZhbHVlIGluc3RhbmNlb2YgQXJyYXkgYW5kXG4gICAgdHlwZW9mIHZhbHVlLmxlbmd0aCBpcyAnbnVtYmVyJyBhbmRcbiAgICB0eXBlb2YgdmFsdWUuc3BsaWNlIGlzICdmdW5jdGlvbicgYW5kXG4gICAgbm90ICggdmFsdWUucHJvcGVydHlJc0VudW1lcmFibGUgJ2xlbmd0aCcgKVxuXG5hcnJUb0pPYmplY3QgPSAoeCkgLT5cblxuICBwYXJzZU9iamVjdCA9IChvYmopIC0+XG4gICAgaWYgbm90IG9iaj8gfHwgb2JqLmxlbmd0aCA9PSAwXG4gICAgICB7fVxuICAgIGVsc2VcbiAgICAgIGtleVZhbHVlID0gb2JqLnNwbGljZSgwLCAyKVxuICAgICAgcmVzdWx0ID0gcGFyc2VPYmplY3Qob2JqKVxuICAgICAgcmVzdWx0W2tleVZhbHVlWzBdXSA9IGFyclRvSk9iamVjdChrZXlWYWx1ZVsxXSlcbiAgICAgIHJlc3VsdFxuXG4gIHBhcnNlQXJyYXkgPSAoYXJyKSAtPlxuICAgIGFyclRvSk9iamVjdCBlbGVtIGZvciBlbGVtIGluIGFyclxuXG4gIGlmIHR5cGVJc0FycmF5KHgpXG4gICAgZmlyc3RFbGVtID0geFswXVxuICAgICMgQW4gYXJyYXkgd2l0aCBmaXJzdCBlbGVtZW50IGJlaW5nIFwiOmxhYmVsXCIgaXMgYW4gb2JqZWN0IGFuZCBhbiBhcnJheSBvZiBhcnJheXMgaXMgYSByZWFsIGFycmF5LCBubz9cbiAgICBpZiB0eXBlb2YgZmlyc3RFbGVtIGlzICdzdHJpbmcnICYmIGZpcnN0RWxlbS5zdGFydHNXaXRoKFwiOlwiKVxuICAgICAgIyBBbiBvYmplY3RcbiAgICAgIHBhcnNlT2JqZWN0KHgpXG4gICAgZWxzZVxuICAgICAgcGFyc2VBcnJheSh4KVxuICBlbHNlXG4gICAgeFxuXG5cbnNleHBUb0pPYmplY3QgPSAobXNnKSAtPlxuICBhcnIgPSBmcm9tTGlzcChtc2cpICMgVGhpcyBhcnJheWlmaWVzIHRoZSBsaXNwIGNvbnMtbGlzdFxuICBhcnJUb0pPYmplY3QoYXJyKVxuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXhwVG9KT2JqZWN0XG4gIGFyclRvSk9iamVjdFxufVxuIl19
