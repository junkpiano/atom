"use strict";
var fs = require('fs');
var path = require('path');
var loglevel = require('loglevel');
var chokidar = require('chokidar');
var Promise = require('bluebird');
var file_utils_1 = require('./file-utils');
var log = loglevel.getLogger('ensime.startup');
var server_connection_1 = require('./server-api/server-connection');
function removeTrailingNewline(str) {
    return str.replace(/^\s+|\s+$/g, '');
}
//  Start an ensime client given path to .ensime. If server already running, just use, else startup that too.
function default_1(serverStarter) {
    log.debug('creating client starter function from ServerStarter');
    return function (parsedDotEnsime, serverVersion, generalHandler) {
        log.debug('trying to start client');
        return new Promise(function (resolve, reject) {
            file_utils_1.ensureExists(parsedDotEnsime.cacheDir).then(function () {
                var httpPortFilePath = parsedDotEnsime.cacheDir + path.sep + "http";
                if (fs.existsSync(httpPortFilePath)) {
                    // server running, no need to start
                    log.debug("port file already there, starting client");
                    var httpPort = removeTrailingNewline(fs.readFileSync(httpPortFilePath).toString());
                    var connectionPromise = server_connection_1.createConnection(httpPort, generalHandler, serverVersion);
                    connectionPromise.then(function (connection) {
                        log.debug("got a connection");
                        resolve(connection);
                    });
                }
                else {
                    var serverPid_1 = undefined;
                    function whenAdded(file) {
                        return new Promise(function (resolve, reject) {
                            log.debug('starting watching for : ' + file);
                            var watcher = chokidar.watch(file, {
                                persistent: true
                            }).on('all', function (event, path) {
                                log.debug('Seen: ', path);
                                watcher.close();
                                resolve();
                            });
                            log.debug("watching…");
                        });
                    }
                    whenAdded(httpPortFilePath).then(function () {
                        log.debug("got a port file");
                        var httpPort = removeTrailingNewline(fs.readFileSync(httpPortFilePath).toString());
                        var connectionPromise = server_connection_1.createConnection(httpPort, generalHandler, serverPid_1);
                        connectionPromise.then(function (connection) {
                            log.debug("got a connection");
                            resolve(connection);
                        });
                    });
                    log.debug('no server running, start that first…');
                    serverStarter(parsedDotEnsime).then(function (pid) { return serverPid_1 = pid; });
                }
            }, function (failToCreateCacheDir) {
                reject(failToCreateCacheDir);
            });
        });
    };
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;
;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9lbnNpbWUtY2xpZW50LXN0YXJ0dXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQU8sRUFBRSxXQUFXLElBQUksQ0FBQyxDQUFDO0FBQzFCLElBQU8sSUFBSSxXQUFXLE1BQU0sQ0FBQyxDQUFDO0FBQzlCLElBQU8sUUFBUSxXQUFXLFVBQVUsQ0FBQyxDQUFDO0FBQ3RDLElBQU8sUUFBUSxXQUFXLFVBQVUsQ0FBQyxDQUFDO0FBRXRDLElBQVksT0FBTyxXQUFNLFVBQVUsQ0FBQyxDQUFBO0FBQ3BDLDJCQUEyQixjQUUzQixDQUFDLENBRndDO0FBRXpDLElBQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNqRCxrQ0FBaUQsZ0NBQWdDLENBQUMsQ0FBQTtBQUVsRiwrQkFBK0IsR0FBVztJQUN4QyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUVELDZHQUE2RztBQUM3RyxtQkFBd0IsYUFBNEI7SUFDbEQsR0FBRyxDQUFDLEtBQUssQ0FBQyxxREFBcUQsQ0FBQyxDQUFBO0lBQ2hFLE1BQU0sQ0FBQyxVQUFTLGVBQTBCLEVBQUUsYUFBcUIsRUFBRSxjQUFvQztRQUVyRyxHQUFHLENBQUMsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUE7UUFDbkMsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFtQixVQUFDLE9BQU8sRUFBRSxNQUFNO1lBRW5ELHlCQUFZLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFFMUMsSUFBTSxnQkFBZ0IsR0FBRyxlQUFlLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDO2dCQUV0RSxFQUFFLENBQUEsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNuQyxtQ0FBbUM7b0JBQ25DLEdBQUcsQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztvQkFDdEQsSUFBTSxRQUFRLEdBQUcscUJBQXFCLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7b0JBQ3BGLElBQU0saUJBQWlCLEdBQUcsb0NBQWdCLENBQUMsUUFBUSxFQUFFLGNBQWMsRUFBRSxhQUFhLENBQUMsQ0FBQTtvQkFDbkYsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQUMsVUFBVTt3QkFDaEMsR0FBRyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO3dCQUM3QixPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBQ3RCLENBQUMsQ0FBQyxDQUFDO2dCQUNMLENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ04sSUFBSSxXQUFTLEdBQUcsU0FBUyxDQUFBO29CQUV6QixtQkFBbUIsSUFBWTt3QkFDN0IsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07NEJBQ2pDLEdBQUcsQ0FBQyxLQUFLLENBQUMsMEJBQTBCLEdBQUMsSUFBSSxDQUFDLENBQUE7NEJBRTFDLElBQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO2dDQUNuQyxVQUFVLEVBQUUsSUFBSTs2QkFDakIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsVUFBQyxLQUFLLEVBQUUsSUFBSTtnQ0FDdkIsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0NBQzFCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQ0FDaEIsT0FBTyxFQUFFLENBQUM7NEJBQ1osQ0FBQyxDQUFDLENBQUM7NEJBRUgsR0FBRyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQTt3QkFDeEIsQ0FBQyxDQUFDLENBQUM7b0JBQ0wsQ0FBQztvQkFFRCxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUU7d0JBQ2hDLEdBQUcsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQzt3QkFDN0IsSUFBTSxRQUFRLEdBQUcscUJBQXFCLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7d0JBQ3JGLElBQU0saUJBQWlCLEdBQUcsb0NBQWdCLENBQUMsUUFBUSxFQUFFLGNBQWMsRUFBRSxXQUFTLENBQUMsQ0FBQTt3QkFDL0UsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQUMsVUFBVTs0QkFDaEMsR0FBRyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDOzRCQUM5QixPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7d0JBQ3RCLENBQUMsQ0FBQyxDQUFDO29CQUNMLENBQUMsQ0FBQyxDQUFDO29CQUVILEdBQUcsQ0FBQyxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQTtvQkFDakQsYUFBYSxDQUFDLGVBQWUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLFdBQVMsR0FBRyxHQUFHLEVBQWYsQ0FBZSxDQUFDLENBQUE7Z0JBQy9ELENBQUM7WUFFSCxDQUFDLEVBQUUsVUFBQyxvQkFBb0I7Z0JBQ3RCLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO1lBQzlCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7QUFDSixDQUFDO0FBMUREOzJCQTBEQyxDQUFBO0FBQUEsQ0FBQyIsImZpbGUiOiJsaWIvZW5zaW1lLWNsaWVudC1zdGFydHVwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuaW1wb3J0IGxvZ2xldmVsID0gcmVxdWlyZSgnbG9nbGV2ZWwnKTtcbmltcG9ydCBjaG9raWRhciA9IHJlcXVpcmUoJ2Nob2tpZGFyJyk7XG5pbXBvcnQge0RvdEVuc2ltZSwgU2VydmVyU3RhcnRlcn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7ZW5zdXJlRXhpc3RzfSBmcm9tICcuL2ZpbGUtdXRpbHMnXG5cbmNvbnN0IGxvZyA9IGxvZ2xldmVsLmdldExvZ2dlcignZW5zaW1lLnN0YXJ0dXAnKTtcbmltcG9ydCB7Y3JlYXRlQ29ubmVjdGlvbiwgU2VydmVyQ29ubmVjdGlvbn0gZnJvbSAnLi9zZXJ2ZXItYXBpL3NlcnZlci1jb25uZWN0aW9uJztcblxuZnVuY3Rpb24gcmVtb3ZlVHJhaWxpbmdOZXdsaW5lKHN0cjogc3RyaW5nKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xufSBcbiAgXG4vLyAgU3RhcnQgYW4gZW5zaW1lIGNsaWVudCBnaXZlbiBwYXRoIHRvIC5lbnNpbWUuIElmIHNlcnZlciBhbHJlYWR5IHJ1bm5pbmcsIGp1c3QgdXNlLCBlbHNlIHN0YXJ0dXAgdGhhdCB0b28uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJ2ZXJTdGFydGVyOiBTZXJ2ZXJTdGFydGVyKSB7XG4gIGxvZy5kZWJ1ZygnY3JlYXRpbmcgY2xpZW50IHN0YXJ0ZXIgZnVuY3Rpb24gZnJvbSBTZXJ2ZXJTdGFydGVyJylcbiAgcmV0dXJuIGZ1bmN0aW9uKHBhcnNlZERvdEVuc2ltZTogRG90RW5zaW1lLCBzZXJ2ZXJWZXJzaW9uOiBzdHJpbmcsIGdlbmVyYWxIYW5kbGVyOiAobXNnOiBzdHJpbmcpID0+IGFueSkgOiBQcm9taXNlTGlrZTxTZXJ2ZXJDb25uZWN0aW9uPiB7XG5cbiAgICBsb2cuZGVidWcoJ3RyeWluZyB0byBzdGFydCBjbGllbnQnKVxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxTZXJ2ZXJDb25uZWN0aW9uPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIGVuc3VyZUV4aXN0cyhwYXJzZWREb3RFbnNpbWUuY2FjaGVEaXIpLnRoZW4oKCkgPT4ge1xuXG4gICAgICAgIGNvbnN0IGh0dHBQb3J0RmlsZVBhdGggPSBwYXJzZWREb3RFbnNpbWUuY2FjaGVEaXIgKyBwYXRoLnNlcCArIFwiaHR0cFwiO1xuXG4gICAgICAgIGlmKGZzLmV4aXN0c1N5bmMoaHR0cFBvcnRGaWxlUGF0aCkpIHtcbiAgICAgICAgICAvLyBzZXJ2ZXIgcnVubmluZywgbm8gbmVlZCB0byBzdGFydFxuICAgICAgICAgIGxvZy5kZWJ1ZyhcInBvcnQgZmlsZSBhbHJlYWR5IHRoZXJlLCBzdGFydGluZyBjbGllbnRcIik7XG4gICAgICAgICAgY29uc3QgaHR0cFBvcnQgPSByZW1vdmVUcmFpbGluZ05ld2xpbmUoZnMucmVhZEZpbGVTeW5jKGh0dHBQb3J0RmlsZVBhdGgpLnRvU3RyaW5nKCkpXG4gICAgICAgICAgY29uc3QgY29ubmVjdGlvblByb21pc2UgPSBjcmVhdGVDb25uZWN0aW9uKGh0dHBQb3J0LCBnZW5lcmFsSGFuZGxlciwgc2VydmVyVmVyc2lvbilcbiAgICAgICAgICBjb25uZWN0aW9uUHJvbWlzZS50aGVuKChjb25uZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICBsb2cuZGVidWcoXCJnb3QgYSBjb25uZWN0aW9uXCIpXG4gICAgICAgICAgICByZXNvbHZlKGNvbm5lY3Rpb24pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCBzZXJ2ZXJQaWQgPSB1bmRlZmluZWRcbiAgICAgICAgICBcbiAgICAgICAgICBmdW5jdGlvbiB3aGVuQWRkZWQoZmlsZTogc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICBsb2cuZGVidWcoJ3N0YXJ0aW5nIHdhdGNoaW5nIGZvciA6ICcrZmlsZSlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICBjb25zdCB3YXRjaGVyID0gY2hva2lkYXIud2F0Y2goZmlsZSwge1xuICAgICAgICAgICAgICAgIHBlcnNpc3RlbnQ6IHRydWVcbiAgICAgICAgICAgICAgfSkub24oJ2FsbCcsIChldmVudCwgcGF0aCkgPT4ge1xuICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZygnU2VlbjogJywgcGF0aCk7XG4gICAgICAgICAgICAgICAgd2F0Y2hlci5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgbG9nLmRlYnVnKFwid2F0Y2hpbmfigKZcIilcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHdoZW5BZGRlZChodHRwUG9ydEZpbGVQYXRoKS50aGVuKCAoKSA9PiB7XG4gICAgICAgICAgICBsb2cuZGVidWcoXCJnb3QgYSBwb3J0IGZpbGVcIik7XG4gICAgICAgICAgICBjb25zdCBodHRwUG9ydCA9IHJlbW92ZVRyYWlsaW5nTmV3bGluZShmcy5yZWFkRmlsZVN5bmMoaHR0cFBvcnRGaWxlUGF0aCkudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBjb25zdCBjb25uZWN0aW9uUHJvbWlzZSA9IGNyZWF0ZUNvbm5lY3Rpb24oaHR0cFBvcnQsIGdlbmVyYWxIYW5kbGVyLCBzZXJ2ZXJQaWQpXG4gICAgICAgICAgICBjb25uZWN0aW9uUHJvbWlzZS50aGVuKChjb25uZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgIGxvZy5kZWJ1ZyhcImdvdCBhIGNvbm5lY3Rpb25cIik7XG4gICAgICAgICAgICAgIHJlc29sdmUoY29ubmVjdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGxvZy5kZWJ1Zygnbm8gc2VydmVyIHJ1bm5pbmcsIHN0YXJ0IHRoYXQgZmlyc3TigKYnKVxuICAgICAgICAgIHNlcnZlclN0YXJ0ZXIocGFyc2VkRG90RW5zaW1lKS50aGVuKChwaWQpID0+IHNlcnZlclBpZCA9IHBpZClcbiAgICAgICAgfVxuXG4gICAgICB9LCAoZmFpbFRvQ3JlYXRlQ2FjaGVEaXIpID0+wqB7XG4gICAgICAgIHJlamVjdChmYWlsVG9DcmVhdGVDYWNoZURpcilcbiAgICAgIH0pO1xuICAgIH0pOyBcbiAgfTtcbn07XG5cbiJdfQ==
