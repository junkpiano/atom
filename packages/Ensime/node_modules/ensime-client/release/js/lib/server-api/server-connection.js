"use strict";
var loglevel = require('loglevel');
var log = loglevel.getLogger('ensime.client');
var Promise = require('bluebird');
var NetworkClient_1 = require('../network/NetworkClient');
function createConnection(httpPort, generalMsgHandler, serverVersion, serverPid) {
    if (serverPid === void 0) { serverPid = undefined; }
    var deferredConnection = Promise.defer();
    var callbackMap = {};
    var ensimeMessageCounter = 1;
    function handleIncoming(msg) {
        var json = JSON.parse(msg);
        log.debug("incoming: ", json);
        var callId = json.callId;
        // If RpcResponse - lookup in map, otherwise use some general function for handling general msgs
        if (callId) {
            try {
                var p = callbackMap[callId];
                log.debug("resolving promise: " + p);
                p.resolve(json.payload);
            }
            catch (error) {
                log.trace("error in callback: " + error);
            }
            finally {
                delete callbackMap[callId];
            }
        }
        else {
            return generalMsgHandler(json.payload);
        }
    }
    function onConnect() {
        deferredConnection.resolve(publicApi());
    }
    function publicApi() {
        log.debug("creating client api");
        return {
            post: post,
            destroy: destroy,
            httpPort: httpPort
        };
    }
    var netClient = new NetworkClient_1.WebsocketClient(httpPort, onConnect, handleIncoming, serverVersion);
    /**
     * Kills server if it was spawned from here.
     */
    function destroy() {
        netClient.destroy();
        if (serverPid)
            serverPid.kill();
    }
    function postString(msg) {
        var p = Promise.defer();
        var wireMsg = "{\"req\": " + msg + ", \"callId\": " + ensimeMessageCounter + "}";
        callbackMap[ensimeMessageCounter++] = p;
        log.debug("outgoing: " + wireMsg);
        netClient.send(wireMsg);
        return p.promise;
    }
    function post(msg) {
        return postString(JSON.stringify(msg));
    }
    return deferredConnection.promise;
}
exports.createConnection = createConnection;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zZXJ2ZXItYXBpL3NlcnZlci1jb25uZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxJQUFZLFFBQVEsV0FBTSxVQUFVLENBQUMsQ0FBQTtBQUNyQyxJQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0FBQy9DLElBQVksT0FBTyxXQUFNLFVBQ3pCLENBQUMsQ0FEa0M7QUFDbkMsOEJBQThCLDBCQUM5QixDQUFDLENBRHVEO0FBbUJ4RCwwQkFBaUMsUUFBZ0IsRUFBRSxpQkFBaUIsRUFBRSxhQUFhLEVBQUUsU0FBcUI7SUFBckIseUJBQXFCLEdBQXJCLHFCQUFxQjtJQUN0RyxJQUFNLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxLQUFLLEVBQW9CLENBQUM7SUFFN0QsSUFBTSxXQUFXLEdBQStDLEVBQUcsQ0FBQTtJQUNuRSxJQUFJLG9CQUFvQixHQUFHLENBQUMsQ0FBQTtJQUU1Qix3QkFBd0IsR0FBRztRQUN6QixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQzdCLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUE7UUFDMUIsZ0dBQWdHO1FBRWhHLEVBQUUsQ0FBQSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDVixJQUFJLENBQUM7Z0JBQ0gsSUFBTSxDQUFDLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUM5QixHQUFHLENBQUMsS0FBSyxDQUFDLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxDQUFBO2dCQUNwQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUN6QixDQUFFO1lBQUEsS0FBSyxDQUFBLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDZCxHQUFHLENBQUMsS0FBSyxDQUFDLHdCQUFzQixLQUFPLENBQUMsQ0FBQTtZQUMxQyxDQUFDO29CQUFTLENBQUM7Z0JBQ1QsT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDNUIsQ0FBQztRQUNILENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDeEMsQ0FBQztJQUNILENBQUM7SUFFRDtRQUNFLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFHRDtRQUNFLEdBQUcsQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUM7WUFDTCxNQUFBLElBQUk7WUFDSixTQUFBLE9BQU87WUFDUCxVQUFBLFFBQVE7U0FDVCxDQUFBO0lBQ0gsQ0FBQztJQUVELElBQU0sU0FBUyxHQUFHLElBQUksK0JBQWUsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxhQUFhLENBQUMsQ0FBQTtJQUV6Rjs7T0FFRztJQUNIO1FBQ0UsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3BCLEVBQUUsQ0FBQSxDQUFDLFNBQVMsQ0FBQztZQUNYLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsb0JBQW9CLEdBQUc7UUFDckIsSUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBYyxDQUFDO1FBQ3RDLElBQU0sT0FBTyxHQUFHLGVBQVcsR0FBRyxzQkFBZSxvQkFBb0IsTUFBRyxDQUFBO1FBQ3BFLFdBQVcsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3ZDLEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxDQUFBO1FBQ2pDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDdkIsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUdELGNBQWMsR0FBRztRQUNmLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQ3hDLENBQUM7SUFFRCxNQUFNLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDO0FBQ3RDLENBQUM7QUFuRWUsd0JBQWdCLG1CQW1FL0IsQ0FBQSIsImZpbGUiOiJsaWIvc2VydmVyLWFwaS9zZXJ2ZXItY29ubmVjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG5ldCBmcm9tICduZXQnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIGxvZ2xldmVsIGZyb20gJ2xvZ2xldmVsJztcbmNvbnN0IGxvZyA9IGxvZ2xldmVsLmdldExvZ2dlcignZW5zaW1lLmNsaWVudCcpXG5pbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gJ2JsdWViaXJkJ1xuaW1wb3J0IHtXZWJzb2NrZXRDbGllbnR9IGZyb20gJy4uL25ldHdvcmsvTmV0d29ya0NsaWVudCdcbmltcG9ydCB7VHlwZWhpbnRlZH0gZnJvbSAnLi4vc2VydmVyLWFwaS9zZXJ2ZXItcHJvdG9jb2wnXG5cblxuLyoqXG4gKiBBIHJ1bm5pbmcgYW5kIGNvbm5lY3RlZCBlbnNpbWUgY2xpZW50XG4gKiBcbiAqIGxvdy1sZXZlbCBhcGlcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZXJ2ZXJDb25uZWN0aW9uIHtcbiAgICBkZXN0cm95OiAoKSA9PiB2b2lkXG4gICAgXG4gICAgaHR0cFBvcnQ6IHN0cmluZ1xuICAgIC8qKlxuICAgICAqIFBvc3QgYSBtc2cgb2JqZWN0IFxuICAgICAqL1xuICAgIHBvc3Q6IChtc2c6IGFueSkgPT4gUHJvbWlzZUxpa2U8VHlwZWhpbnRlZD5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3Rpb24oaHR0cFBvcnQ6IHN0cmluZywgZ2VuZXJhbE1zZ0hhbmRsZXIsIHNlcnZlclZlcnNpb24sIHNlcnZlclBpZCA9IHVuZGVmaW5lZCk6IFByb21pc2VMaWtlPFNlcnZlckNvbm5lY3Rpb24+IHtcbiAgICBjb25zdCBkZWZlcnJlZENvbm5lY3Rpb24gPSBQcm9taXNlLmRlZmVyPFNlcnZlckNvbm5lY3Rpb24+KCk7XG5cbiAgICBjb25zdCBjYWxsYmFja01hcCA6IHtbY2FsbElkOiBzdHJpbmddOiBQcm9taXNlLlJlc29sdmVyPGFueT59ID0geyB9XG4gICAgbGV0IGVuc2ltZU1lc3NhZ2VDb3VudGVyID0gMVxuICAgIFxuICAgIGZ1bmN0aW9uIGhhbmRsZUluY29taW5nKG1zZykge1xuICAgICAgY29uc3QganNvbiA9IEpTT04ucGFyc2UobXNnKTtcbiAgICAgIGxvZy5kZWJ1ZyhcImluY29taW5nOiBcIiwganNvbilcbiAgICAgIGNvbnN0IGNhbGxJZCA9IGpzb24uY2FsbElkXG4gICAgICAvLyBJZiBScGNSZXNwb25zZSAtIGxvb2t1cCBpbiBtYXAsIG90aGVyd2lzZSB1c2Ugc29tZSBnZW5lcmFsIGZ1bmN0aW9uIGZvciBoYW5kbGluZyBnZW5lcmFsIG1zZ3NcblxuICAgICAgaWYoY2FsbElkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgcCA9IGNhbGxiYWNrTWFwW2NhbGxJZF07XG4gICAgICAgICAgbG9nLmRlYnVnKFwicmVzb2x2aW5nIHByb21pc2U6IFwiICsgcClcbiAgICAgICAgICBwLnJlc29sdmUoanNvbi5wYXlsb2FkKVxuICAgICAgICB9IGNhdGNoKGVycm9yKSB7XG4gICAgICAgICAgbG9nLnRyYWNlKGBlcnJvciBpbiBjYWxsYmFjazogJHtlcnJvcn1gKVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGRlbGV0ZSBjYWxsYmFja01hcFtjYWxsSWRdXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBnZW5lcmFsTXNnSGFuZGxlcihqc29uLnBheWxvYWQpXG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIG9uQ29ubmVjdCgpIHtcbiAgICAgIGRlZmVycmVkQ29ubmVjdGlvbi5yZXNvbHZlKHB1YmxpY0FwaSgpKTtcbiAgICB9IFxuXG5cbiAgICBmdW5jdGlvbiBwdWJsaWNBcGkoKSA6IFNlcnZlckNvbm5lY3Rpb24ge1xuICAgICAgbG9nLmRlYnVnKFwiY3JlYXRpbmcgY2xpZW50IGFwaVwiKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBvc3QsXG4gICAgICAgIGRlc3Ryb3ksXG4gICAgICAgIGh0dHBQb3J0XG4gICAgICB9XG4gICAgfSBcblxuICAgIGNvbnN0IG5ldENsaWVudCA9IG5ldyBXZWJzb2NrZXRDbGllbnQoaHR0cFBvcnQsIG9uQ29ubmVjdCwgaGFuZGxlSW5jb21pbmcsIHNlcnZlclZlcnNpb24pXG5cbiAgICAvKipcbiAgICAgKiBLaWxscyBzZXJ2ZXIgaWYgaXQgd2FzIHNwYXduZWQgZnJvbSBoZXJlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICBuZXRDbGllbnQuZGVzdHJveSgpO1xuICAgICAgaWYoc2VydmVyUGlkKVxuICAgICAgICBzZXJ2ZXJQaWQua2lsbCgpO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBwb3N0U3RyaW5nKG1zZyk6IFByb21pc2VMaWtlPFR5cGVoaW50ZWQ+IHtcbiAgICAgIGNvbnN0IHAgPSBQcm9taXNlLmRlZmVyPFR5cGVoaW50ZWQ+KCk7XG4gICAgICBjb25zdCB3aXJlTXNnID0gYHtcInJlcVwiOiAke21zZ30sIFwiY2FsbElkXCI6ICR7ZW5zaW1lTWVzc2FnZUNvdW50ZXJ9fWBcbiAgICAgIGNhbGxiYWNrTWFwW2Vuc2ltZU1lc3NhZ2VDb3VudGVyKytdID0gcFxuICAgICAgbG9nLmRlYnVnKFwib3V0Z29pbmc6IFwiICsgd2lyZU1zZylcbiAgICAgIG5ldENsaWVudC5zZW5kKHdpcmVNc2cpXG4gICAgICByZXR1cm4gcC5wcm9taXNlO1xuICAgIH1cblxuICAgIFxuICAgIGZ1bmN0aW9uIHBvc3QobXNnKSA6IFByb21pc2VMaWtlPFR5cGVoaW50ZWQ+IHtcbiAgICAgIHJldHVybiBwb3N0U3RyaW5nKEpTT04uc3RyaW5naWZ5KG1zZykpXG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmVycmVkQ29ubmVjdGlvbi5wcm9taXNlO1xufVxuIl19
