"use strict";
var fs = require('fs-extra');
var path = require('path');
var temp = require('temp');
var Promise = require('bluebird');
temp.track();
var tempDir = temp.mkdirSync('ensime-temp-files');
var getTempDir = function () { return tempDir; };
var getTempPath = function (file) {
    if (process.platform == 'win32')
        return path.join(getTempDir(), file.replace(':', ""));
    else
        return path.join(getTempDir(), file);
};
var withTempFile = function (filePath, bufferText) {
    var tempFilePath = getTempPath(filePath);
    var p = Promise.defer();
    fs.outputFile(tempFilePath, bufferText, function (err) {
        if (err)
            p.reject("error with file");
        else
            p.resolve(tempFilePath);
    });
    return p.promise;
};
function apiOf(client) {
    function getCompletions(filePath, bufferText, offset, noOfAutocompleteSuggestions) {
        return withTempFile(filePath, bufferText).then(function (tempFile) {
            var msg = {
                typehint: "CompletionsReq",
                fileInfo: {
                    file: filePath,
                    contentsIn: tempFile
                },
                point: offset,
                maxResults: noOfAutocompleteSuggestions,
                caseSens: false,
                reload: true
            };
            return client.post(msg);
        });
    }
    function getSymbolAtPoint(path, offset) {
        return new Promise(function (resolve, reject) {
            var req = {
                typehint: "SymbolAtPointReq",
                file: path,
                point: offset
            };
            client.post(req).then(function (msg) {
                if (msg.typehint == 'SymbolInfo')
                    resolve(msg);
                else
                    reject("no symbol response");
            });
        });
    }
    function typecheckBuffer(path, text) {
        withTempFile(path, text).then(function (tempFilePath) {
            var msg = {
                typehint: "TypecheckFileReq",
                fileInfo: {
                    file: path,
                    contentsIn: tempFilePath
                }
            };
            return client.post(msg);
        });
    }
    function typecheckFile(path) {
        var msg = {
            typehint: "TypecheckFileReq",
            fileInfo: {
                file: path
            }
        };
        return client.post(msg);
    }
    function symbolByName(qualifiedName) {
        var msg = {
            typehint: 'SymbolByNameReq',
            typeFullName: qualifiedName
        };
        return client.post(msg);
    }
    function formatSourceFile(path, contents, callback) {
        return withTempFile(path, contents).then(function (tempFilePath) {
            var req = {
                typehint: "FormatOneSourceReq",
                file: {
                    file: path,
                    contentsIn: tempFilePath
                }
            };
            return client.post(req);
        });
    }
    function getImplicitInfo(path, startO, endO) {
        var msg = {
            "typehint": "ImplicitInfoReq",
            "file": path,
            "range": {
                "from": startO,
                "to": endO
            }
        };
        return client.post(msg);
    }
    function typecheckAll() {
        client.post({ "typehint": "TypecheckAllReq" });
    }
    function unloadAll() {
        client.post({ "typehint": "UnloadAllReq" });
    }
    function getRefactoringPatch(procId, refactoring) {
        var req = {
            typehint: 'RefactorReq',
            procId: procId,
            params: refactoring,
            interactive: false
        };
        return client.post(req);
    }
    function searchPublicSymbols(keywords, maxSymbols) {
        return client.post({
            typehint: "PublicSymbolSearchReq",
            keywords: keywords,
            maxResults: maxSymbols
        });
    }
    function getDocUriAtPoint(file, point) {
        return client.post({
            typehint: "DocUriAtPointReq",
            file: file,
            point: point
        });
    }
    function getImportSuggestions(file, characterIndex, symbol) {
        return client.post({
            typehint: 'ImportSuggestionsReq',
            file: file,
            point: characterIndex,
            names: [symbol],
            maxResults: 10
        });
    }
    return {
        getCompletions: getCompletions,
        getSymbolAtPoint: getSymbolAtPoint,
        typecheckFile: typecheckFile,
        typecheckBuffer: typecheckBuffer,
        symbolByName: symbolByName,
        formatSourceFile: formatSourceFile,
        getImplicitInfo: getImplicitInfo,
        typecheckAll: typecheckAll,
        unloadAll: unloadAll,
        getRefactoringPatch: getRefactoringPatch,
        searchPublicSymbols: searchPublicSymbols,
        getDocUriAtPoint: getDocUriAtPoint,
        getImportSuggestions: getImportSuggestions
    };
}
exports.apiOf = apiOf;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
