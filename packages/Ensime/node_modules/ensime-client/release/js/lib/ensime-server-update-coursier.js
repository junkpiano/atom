"use strict";
var fs = require('fs');
var path = require('path');
var Promise = require('bluebird');
var child_process_1 = require('child_process');
var _ = require('lodash');
var loglevel = require('loglevel');
var download = require('download');
var file_utils_1 = require('./file-utils');
function proxyArgs(proxySettings) {
    var args = [];
    if (proxySettings != undefined) {
        args.push('-Dhttp.proxyHost=' + proxySettings.host);
        args.push('-Dhttps.proxyHost=' + proxySettings.host);
        args.push('-Dhttp.proxyPort=' + proxySettings.port);
        args.push('-Dhttps.proxyPort=' + proxySettings.port);
        if (proxySettings.user != undefined) {
            args.push('-Dhttp.proxyUser=' + proxySettings.user);
            args.push('-Dhttps.proxyUser=' + proxySettings.user);
        }
        if (proxySettings.password != undefined) {
            args.push('-Dhttp.proxyPassword=' + proxySettings.password);
            args.push('-Dhttps.proxyPassword=' + proxySettings.password);
        }
    }
    return args;
}
function javaArgs(dotEnsime, serverVersion, updateChanging) {
    var scalaVersion = dotEnsime.scalaVersion;
    var scalaEdition = dotEnsime.scalaEdition;
    var args = [
        '-noverify',
        '-jar', './coursier',
        'fetch'
    ];
    if (updateChanging) {
        args.push('-m', 'update-changing');
    }
    args.push('-r', 'file:///$HOME/.m2/repository', '-r', 'https://oss.sonatype.org/content/repositories/snapshots', '-r', 'https://jcenter.bintray.com/', "org.ensime:ensime_" + scalaEdition + ":" + serverVersion, '-V', "org.scala-lang:scala-compiler:" + scalaVersion, '-V', "org.scala-lang:scala-library:" + scalaVersion, '-V', "org.scala-lang:scala-reflect:" + scalaVersion, '-V', "org.scala-lang:scalap:" + scalaVersion);
    return args;
}
// Updates ensime server, invoke callback when done
function updateServer(tempdir, failure, getPidLogger, proxySettings) {
    var logger = loglevel.getLogger('ensime.server-update');
    logger.debug('update ensime server, tempdir: ' + tempdir);
    return function doUpdateServer(parsedDotEnsime, ensimeServerVersion, classpathFile) {
        logger.debug('trying to update server with coursierâ€¦');
        return file_utils_1.ensureExists(parsedDotEnsime.cacheDir).then(function (cacheDir) {
            console.log('cachedir: ', cacheDir);
            return new Promise(function (resolve, reject) {
                function runCoursier() {
                    var javaCmd = (parsedDotEnsime.javaHome) ?
                        path.join(parsedDotEnsime.javaHome, 'bin', 'java')
                        :
                            "java";
                    var spaceSeparatedClassPath = "";
                    var args = proxyArgs(proxySettings).concat(javaArgs(parsedDotEnsime, ensimeServerVersion, true));
                    logger.debug('java command to spawn', javaCmd, args, tempdir);
                    var pid = child_process_1.spawn(javaCmd, args, { cwd: tempdir });
                    var pidLogger = getPidLogger();
                    pid.stdout.on('data', function (chunk) {
                        var s = chunk.toString('utf8');
                        logger.debug('got data from java process', s);
                        if (pidLogger)
                            pidLogger(s);
                        spaceSeparatedClassPath += chunk.toString('utf8');
                    });
                    pid.stderr.on('data', function (chunk) {
                        var s = chunk.toString('utf8');
                        logger.debug('coursier: ', s);
                        if (pidLogger)
                            pidLogger(s);
                    });
                    pid.stdin.end();
                    pid.on('close', function (exitCode) {
                        if (exitCode == 0) {
                            var classpath = _.join(_.split(_.trim(spaceSeparatedClassPath), /\s/), path.delimiter);
                            logger.debug(['classpath', classpath]);
                            fs.writeFile(classpathFile, classpath, resolve);
                        }
                        else {
                            logger.error('Ensime server update failed, exitCode: ', exitCode);
                            failure("Ensime server update failed", exitCode);
                            reject(exitCode);
                        }
                    });
                }
                logger.debug("checking tempdir: " + tempdir);
                if (!fs.existsSync(tempdir)) {
                    logger.debug("tempdir didn't exist, creating: " + tempdir);
                    fs.mkdirSync(tempdir);
                }
                if (fs.existsSync(tempdir + path.sep + 'coursier')) {
                    logger.debug("pre-existing coursier binary, downloading: " + tempdir);
                    runCoursier();
                }
                else {
                    logger.trace("no pre-existing coursier binary, downloading: " + tempdir);
                    var coursierUrl = 'https://git.io/vgvpD'; // Java 7
                    download({ mode: '0755' }).get(coursierUrl).dest(tempdir).rename('coursier').run(function (err) {
                        if (err) {
                            logger.error("failed to download coursier");
                            failure("Failed to download coursier", err);
                            reject(err);
                        }
                        else {
                            logger.debug("downloaded coursier, now running:");
                            runCoursier();
                        }
                    });
                }
            });
        });
    };
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = updateServer;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
