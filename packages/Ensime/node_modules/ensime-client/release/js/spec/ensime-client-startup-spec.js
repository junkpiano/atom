(function() {
  var chokidar, fs, log, loglevel, path, temp, testFile;

  temp = (require('temp')).track();

  path = require('path');

  fs = require('fs');

  loglevel = require('loglevel');

  loglevel.setDefaultLevel('trace');

  loglevel.setLevel('trace');

  log = loglevel.getLogger('ensime-cloent-startup-spec');

  chokidar = require('chokidar');

  testFile = function(expectedFile) {
    var spy, watcher;
    spy = jasmine.createSpy('callback');
    watcher = chokidar.watch(expectedFile, {
      persistent: true
    }).on('add', function(path) {
      spy();
      return watcher.close();
    });
    fs.writeFileSync(expectedFile, 'Hello Gaze, see me!');
    return waitsFor((function() {
      return spy.callCount > 0;
    }), "callback wasn't called in time", 5000);
  };

  xdescribe('chokidar', function() {
    it("should notice absolute paths, even from temp", function() {
      return testFile(temp.path({
        suffix: '.txt'
      }));
    });
    return it("should notice absolute paths if relativized", function() {
      return testFile(path.join(process.cwd(), 'foo'));
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlYy9lbnNpbWUtY2xpZW50LXN0YXJ0dXAtc3BlYy5qcyIsInNvdXJjZXMiOlsic3BlYy9lbnNpbWUtY2xpZW50LXN0YXJ0dXAtc3BlYy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLElBQUEsR0FBTyxDQUFDLE9BQUEsQ0FBUSxNQUFSLENBQUQsQ0FBZ0IsQ0FBQyxLQUFqQixDQUFBOztFQUVQLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUjs7RUFDUCxFQUFBLEdBQUssT0FBQSxDQUFRLElBQVI7O0VBRUwsUUFBQSxHQUFXLE9BQUEsQ0FBUSxVQUFSOztFQUNYLFFBQVEsQ0FBQyxlQUFULENBQXlCLE9BQXpCOztFQUNBLFFBQVEsQ0FBQyxRQUFULENBQWtCLE9BQWxCOztFQUNBLEdBQUEsR0FBTSxRQUFRLENBQUMsU0FBVCxDQUFtQiw0QkFBbkI7O0VBRU4sUUFBQSxHQUFXLE9BQUEsQ0FBUSxVQUFSOztFQUVYLFFBQUEsR0FBVyxTQUFDLFlBQUQ7QUFDVCxRQUFBO0lBQUEsR0FBQSxHQUFNLE9BQU8sQ0FBQyxTQUFSLENBQWtCLFVBQWxCO0lBRU4sT0FBQSxHQUFVLFFBQVEsQ0FBQyxLQUFULENBQWUsWUFBZixFQUE2QjtNQUNyQyxVQUFBLEVBQVksSUFEeUI7S0FBN0IsQ0FFTixDQUFDLEVBRkssQ0FFRixLQUZFLEVBRUssU0FBQyxJQUFEO01BQ1gsR0FBQSxDQUFBO2FBQ0EsT0FBTyxDQUFDLEtBQVIsQ0FBQTtJQUZXLENBRkw7SUFPVixFQUFFLENBQUMsYUFBSCxDQUFpQixZQUFqQixFQUErQixxQkFBL0I7V0FFQSxRQUFBLENBQVUsQ0FBQyxTQUFBO2FBQUcsR0FBRyxDQUFDLFNBQUosR0FBZ0I7SUFBbkIsQ0FBRCxDQUFWLEVBQWtDLGdDQUFsQyxFQUFvRSxJQUFwRTtFQVpTOztFQWdCWCxTQUFBLENBQVUsVUFBVixFQUFzQixTQUFBO0lBQ3BCLEVBQUEsQ0FBRyw4Q0FBSCxFQUFtRCxTQUFBO2FBQ2pELFFBQUEsQ0FBUyxJQUFJLENBQUMsSUFBTCxDQUFVO1FBQUMsTUFBQSxFQUFRLE1BQVQ7T0FBVixDQUFUO0lBRGlELENBQW5EO1dBR0EsRUFBQSxDQUFHLDZDQUFILEVBQWtELFNBQUE7YUFDaEQsUUFBQSxDQUFTLElBQUksQ0FBQyxJQUFMLENBQVUsT0FBTyxDQUFDLEdBQVIsQ0FBQSxDQUFWLEVBQXlCLEtBQXpCLENBQVQ7SUFEZ0QsQ0FBbEQ7RUFKb0IsQ0FBdEI7QUE1QkEiLCJzb3VyY2VzQ29udGVudCI6WyJ0ZW1wID0gKHJlcXVpcmUgJ3RlbXAnKS50cmFjaygpXG5cbnBhdGggPSByZXF1aXJlICdwYXRoJ1xuZnMgPSByZXF1aXJlICdmcydcblxubG9nbGV2ZWwgPSByZXF1aXJlICdsb2dsZXZlbCdcbmxvZ2xldmVsLnNldERlZmF1bHRMZXZlbCgndHJhY2UnKVxubG9nbGV2ZWwuc2V0TGV2ZWwoJ3RyYWNlJylcbmxvZyA9IGxvZ2xldmVsLmdldExvZ2dlcignZW5zaW1lLWNsb2VudC1zdGFydHVwLXNwZWMnKVxuXG5jaG9raWRhciA9IHJlcXVpcmUgJ2Nob2tpZGFyJ1xuXG50ZXN0RmlsZSA9IChleHBlY3RlZEZpbGUpIC0+XG4gIHNweSA9IGphc21pbmUuY3JlYXRlU3B5KCdjYWxsYmFjaycpXG4gIFxuICB3YXRjaGVyID0gY2hva2lkYXIud2F0Y2goZXhwZWN0ZWRGaWxlLCB7XG4gICAgcGVyc2lzdGVudDogdHJ1ZVxuICAgIH0pLm9uKCdhZGQnLCAocGF0aCkgLT5cbiAgICAgIHNweSgpXG4gICAgICB3YXRjaGVyLmNsb3NlKClcbiAgICAgIClcbiAgICAgIFxuICBmcy53cml0ZUZpbGVTeW5jKGV4cGVjdGVkRmlsZSwgJ0hlbGxvIEdhemUsIHNlZSBtZSEnKVxuICBcbiAgd2FpdHNGb3IoICgtPiBzcHkuY2FsbENvdW50ID4gMCksIFwiY2FsbGJhY2sgd2Fzbid0IGNhbGxlZCBpbiB0aW1lXCIsIDUwMDApXG5cblxuXG54ZGVzY3JpYmUgJ2Nob2tpZGFyJywgLT5cbiAgaXQgXCJzaG91bGQgbm90aWNlIGFic29sdXRlIHBhdGhzLCBldmVuIGZyb20gdGVtcFwiLCAtPlxuICAgIHRlc3RGaWxlKHRlbXAucGF0aCh7c3VmZml4OiAnLnR4dCd9KSlcblxuICBpdCBcInNob3VsZCBub3RpY2UgYWJzb2x1dGUgcGF0aHMgaWYgcmVsYXRpdml6ZWRcIiwgLT5cbiAgICB0ZXN0RmlsZShwYXRoLmpvaW4gcHJvY2Vzcy5jd2QoKSwgJ2ZvbycpXG4gIFxuIl19
