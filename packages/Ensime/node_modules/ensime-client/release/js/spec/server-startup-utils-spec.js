(function() {
  var _, fixClasspath, javaArgsOf, javaCmdOf, path, ref;

  path = require('path');

  _ = require('lodash');

  ref = require('../lib/server-startup/server-startup-utils'), fixClasspath = ref.fixClasspath, javaArgsOf = ref.javaArgsOf, javaCmdOf = ref.javaCmdOf;

  describe('server-startup', function() {
    describe('fixClasspath', function() {
      return it("should correctly sort classpath and add tools.jar", function() {
        var classpathList, fixedClasspath, javaHome;
        javaHome = '__javaHome__';
        classpathList = ['a.jar', 'b.jar', 'monkey.jar'];
        fixedClasspath = fixClasspath(javaHome, classpathList);
        return expect(fixedClasspath).toBe(_.join(['monkey.jar', 'a.jar', 'b.jar', path.join('__javaHome__', 'lib', 'tools.jar')], path.delimiter));
      });
    });
    describe('javaArgsOf', function() {
      it("should work without server flags", function() {
        var args;
        args = javaArgsOf('monkey.jar:a.jar:b.jar:__javaHome__/lib/tools.jar', {
          dotEnsimePath: '__.ensime__'
        });
        return expect(args).toEqual(['-classpath', 'monkey.jar:a.jar:b.jar:__javaHome__/lib/tools.jar', '-Densime.config=__.ensime__', '-Densime.protocol=jerk', 'org.ensime.server.Server']);
      });
      return it("should work without with server flags", function() {
        var args;
        args = javaArgsOf('monkey.jar:a.jar:b.jar:__javaHome__/lib/tools.jar', {
          dotEnsimePath: '__.ensime__'
        }, "1.0.0", '-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=11111');
        return expect(args).toEqual(['-classpath', 'monkey.jar:a.jar:b.jar:__javaHome__/lib/tools.jar', '-Densime.config=__.ensime__', '-Densime.protocol=jerk', '-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=11111', 'org.ensime.server.Server']);
      });
    });
    return describe('javaCmdOf', function() {
      return it('should find java form .ensime', function() {
        var dotEnsime;
        dotEnsime = {
          javaHome: '__javaHome__'
        };
        return expect(javaCmdOf(dotEnsime)).toBe(path.join('__javaHome__', 'bin', 'java'));
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlYy9zZXJ2ZXItc3RhcnR1cC11dGlscy1zcGVjLmpzIiwic291cmNlcyI6WyJzcGVjL3NlcnZlci1zdGFydHVwLXV0aWxzLXNwZWMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVI7O0VBQ1AsQ0FBQSxHQUFJLE9BQUEsQ0FBUSxRQUFSOztFQUNKLE1BQXdDLE9BQUEsQ0FBUSw0Q0FBUixDQUF4QyxFQUFDLCtCQUFELEVBQWUsMkJBQWYsRUFBMkI7O0VBRTNCLFFBQUEsQ0FBUyxnQkFBVCxFQUEyQixTQUFBO0lBQ3pCLFFBQUEsQ0FBUyxjQUFULEVBQXlCLFNBQUE7YUFDdkIsRUFBQSxDQUFHLG1EQUFILEVBQXdELFNBQUE7QUFDdEQsWUFBQTtRQUFBLFFBQUEsR0FBVztRQUNYLGFBQUEsR0FBZ0IsQ0FBQyxPQUFELEVBQVUsT0FBVixFQUFtQixZQUFuQjtRQUNoQixjQUFBLEdBQWlCLFlBQUEsQ0FBYSxRQUFiLEVBQXVCLGFBQXZCO2VBQ2pCLE1BQUEsQ0FBTyxjQUFQLENBQXNCLENBQUMsSUFBdkIsQ0FBNEIsQ0FBQyxDQUFDLElBQUYsQ0FBTyxDQUFDLFlBQUQsRUFBYyxPQUFkLEVBQXNCLE9BQXRCLEVBQThCLElBQUksQ0FBQyxJQUFMLENBQVUsY0FBVixFQUF5QixLQUF6QixFQUErQixXQUEvQixDQUE5QixDQUFQLEVBQW1GLElBQUksQ0FBQyxTQUF4RixDQUE1QjtNQUpzRCxDQUF4RDtJQUR1QixDQUF6QjtJQU9BLFFBQUEsQ0FBUyxZQUFULEVBQXVCLFNBQUE7TUFDckIsRUFBQSxDQUFHLGtDQUFILEVBQXVDLFNBQUE7QUFDckMsWUFBQTtRQUFBLElBQUEsR0FBTyxVQUFBLENBQVcsbURBQVgsRUFBZ0U7VUFBQyxhQUFBLEVBQWUsYUFBaEI7U0FBaEU7ZUFDUCxNQUFBLENBQU8sSUFBUCxDQUFZLENBQUMsT0FBYixDQUFxQixDQUFFLFlBQUYsRUFBZ0IsbURBQWhCLEVBQ3BCLDZCQURvQixFQUNXLHdCQURYLEVBQ3FDLDBCQURyQyxDQUFyQjtNQUZxQyxDQUF2QzthQUtBLEVBQUEsQ0FBRyx1Q0FBSCxFQUE0QyxTQUFBO0FBQzFDLFlBQUE7UUFBQSxJQUFBLEdBQU8sVUFBQSxDQUFXLG1EQUFYLEVBQWdFO1VBQUMsYUFBQSxFQUFlLGFBQWhCO1NBQWhFLEVBQWdHLE9BQWhHLEVBQ0wsd0VBREs7ZUFFUCxNQUFBLENBQU8sSUFBUCxDQUFZLENBQUMsT0FBYixDQUFxQixDQUFFLFlBQUYsRUFBZ0IsbURBQWhCLEVBQ3BCLDZCQURvQixFQUNXLHdCQURYLEVBQ3FDLHdFQURyQyxFQUU4QywwQkFGOUMsQ0FBckI7TUFIMEMsQ0FBNUM7SUFOcUIsQ0FBdkI7V0FhQSxRQUFBLENBQVMsV0FBVCxFQUFzQixTQUFBO2FBQ3BCLEVBQUEsQ0FBRywrQkFBSCxFQUFvQyxTQUFBO0FBQ2xDLFlBQUE7UUFBQSxTQUFBLEdBQ0U7VUFBQSxRQUFBLEVBQVUsY0FBVjs7ZUFDRixNQUFBLENBQU8sU0FBQSxDQUFVLFNBQVYsQ0FBUCxDQUE0QixDQUFDLElBQTdCLENBQWtDLElBQUksQ0FBQyxJQUFMLENBQVUsY0FBVixFQUF5QixLQUF6QixFQUErQixNQUEvQixDQUFsQztNQUhrQyxDQUFwQztJQURvQixDQUF0QjtFQXJCeUIsQ0FBM0I7QUFKQSIsInNvdXJjZXNDb250ZW50IjpbInBhdGggPSByZXF1aXJlICdwYXRoJ1xuXyA9IHJlcXVpcmUgJ2xvZGFzaCdcbntmaXhDbGFzc3BhdGgsIGphdmFBcmdzT2YsIGphdmFDbWRPZn0gPSByZXF1aXJlICcuLi9saWIvc2VydmVyLXN0YXJ0dXAvc2VydmVyLXN0YXJ0dXAtdXRpbHMnXG5cbmRlc2NyaWJlICdzZXJ2ZXItc3RhcnR1cCcsIC0+XG4gIGRlc2NyaWJlICdmaXhDbGFzc3BhdGgnLCAtPlxuICAgIGl0IFwic2hvdWxkIGNvcnJlY3RseSBzb3J0IGNsYXNzcGF0aCBhbmQgYWRkIHRvb2xzLmphclwiLCAtPlxuICAgICAgamF2YUhvbWUgPSAnX19qYXZhSG9tZV9fJ1xuICAgICAgY2xhc3NwYXRoTGlzdCA9IFsnYS5qYXInLCAnYi5qYXInLCAnbW9ua2V5LmphciddXG4gICAgICBmaXhlZENsYXNzcGF0aCA9IGZpeENsYXNzcGF0aChqYXZhSG9tZSwgY2xhc3NwYXRoTGlzdClcbiAgICAgIGV4cGVjdChmaXhlZENsYXNzcGF0aCkudG9CZShfLmpvaW4oWydtb25rZXkuamFyJywnYS5qYXInLCdiLmphcicscGF0aC5qb2luKCdfX2phdmFIb21lX18nLCdsaWInLCd0b29scy5qYXInKV0sIHBhdGguZGVsaW1pdGVyKSlcbiAgXG4gIGRlc2NyaWJlICdqYXZhQXJnc09mJywgLT5cbiAgICBpdCBcInNob3VsZCB3b3JrIHdpdGhvdXQgc2VydmVyIGZsYWdzXCIsIC0+XG4gICAgICBhcmdzID0gamF2YUFyZ3NPZignbW9ua2V5LmphcjphLmphcjpiLmphcjpfX2phdmFIb21lX18vbGliL3Rvb2xzLmphcicsIHtkb3RFbnNpbWVQYXRoOiAnX18uZW5zaW1lX18nfSlcbiAgICAgIGV4cGVjdChhcmdzKS50b0VxdWFsIFsgJy1jbGFzc3BhdGgnLCAnbW9ua2V5LmphcjphLmphcjpiLmphcjpfX2phdmFIb21lX18vbGliL3Rvb2xzLmphcicsXG4gICAgICAgJy1EZW5zaW1lLmNvbmZpZz1fXy5lbnNpbWVfXycsICctRGVuc2ltZS5wcm90b2NvbD1qZXJrJywgJ29yZy5lbnNpbWUuc2VydmVyLlNlcnZlcicgXVxuICBcbiAgICBpdCBcInNob3VsZCB3b3JrIHdpdGhvdXQgd2l0aCBzZXJ2ZXIgZmxhZ3NcIiwgLT5cbiAgICAgIGFyZ3MgPSBqYXZhQXJnc09mKCdtb25rZXkuamFyOmEuamFyOmIuamFyOl9famF2YUhvbWVfXy9saWIvdG9vbHMuamFyJywge2RvdEVuc2ltZVBhdGg6ICdfXy5lbnNpbWVfXyd9LCBcIjEuMC4wXCJcbiAgICAgICAgJy1YZGVidWcgLVhydW5qZHdwOnRyYW5zcG9ydD1kdF9zb2NrZXQsc2VydmVyPXksc3VzcGVuZD1uLGFkZHJlc3M9MTExMTEnKVxuICAgICAgZXhwZWN0KGFyZ3MpLnRvRXF1YWwgWyAnLWNsYXNzcGF0aCcsICdtb25rZXkuamFyOmEuamFyOmIuamFyOl9famF2YUhvbWVfXy9saWIvdG9vbHMuamFyJyxcbiAgICAgICAnLURlbnNpbWUuY29uZmlnPV9fLmVuc2ltZV9fJywgJy1EZW5zaW1lLnByb3RvY29sPWplcmsnLCAnLVhkZWJ1Z1xuICAgICAgICAtWHJ1bmpkd3A6dHJhbnNwb3J0PWR0X3NvY2tldCxzZXJ2ZXI9eSxzdXNwZW5kPW4sYWRkcmVzcz0xMTExMScsICdvcmcuZW5zaW1lLnNlcnZlci5TZXJ2ZXInIF1cblxuICBkZXNjcmliZSAnamF2YUNtZE9mJywgLT5cbiAgICBpdCAnc2hvdWxkIGZpbmQgamF2YSBmb3JtIC5lbnNpbWUnLCAtPlxuICAgICAgZG90RW5zaW1lID1cbiAgICAgICAgamF2YUhvbWU6ICdfX2phdmFIb21lX18nXG4gICAgICBleHBlY3QoamF2YUNtZE9mKGRvdEVuc2ltZSkpLnRvQmUgcGF0aC5qb2luKCdfX2phdmFIb21lX18nLCdiaW4nLCdqYXZhJylcbiJdfQ==
