(function() {
  var arrToJObject, fromLisp, lib, readFromString, ref, ref1, sexpToJObject;

  lib = '../lib';

  ref = require(lib + "/lisp/swank-extras"), sexpToJObject = ref.sexpToJObject, arrToJObject = ref.arrToJObject;

  ref1 = require(lib + "/lisp/lisp"), readFromString = ref1.readFromString, fromLisp = ref1.fromLisp;

  describe('sexpToJObject', function() {
    it("should parse the problematic part of completion response", function() {
      var arr, input, lisp, result;
      input = "(((\"x\" \"Int\") (\"y\" \"Int\")))";
      lisp = readFromString(input);
      arr = fromLisp(lisp);
      result = arrToJObject(arr);
      expect(result[0][0][0]).toBe("x");
      return expect(result[0][1][1]).toBe("Int");
    });
    return it("should parse scala notes", function() {
      var input, result;
      input = "(:scala-notes (:is-full nil :notes ((:file \"/Users/viktor/dev/projects/kostbevakningen/src/main/scala/se/kostbevakningen/model/record/Ingredient.scala\" :msg \"missing\n arguments for method test in object Ingredient; follow this method with `_' if you want to treat it as a partially applied function\" :severity error :beg 4138 :end 4142 :line 105 :col 3))))";
      result = sexpToJObject(readFromString(input));
      return expect(result[":scala-notes"][":notes"].length).toBe(1);
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlYy9zd2Fuay1leHRyYXMtc3BlYy5qcyIsInNvdXJjZXMiOlsic3BlYy9zd2Fuay1leHRyYXMtc3BlYy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLEdBQUEsR0FBTTs7RUFDTixNQUFnQyxPQUFBLENBQVcsR0FBRCxHQUFLLG9CQUFmLENBQWhDLEVBQUMsaUNBQUQsRUFBZ0I7O0VBQ2hCLE9BQTZCLE9BQUEsQ0FBVyxHQUFELEdBQUssWUFBZixDQUE3QixFQUFDLG9DQUFELEVBQWlCOztFQUVqQixRQUFBLENBQVMsZUFBVCxFQUEwQixTQUFBO0lBQ3hCLEVBQUEsQ0FBRywwREFBSCxFQUErRCxTQUFBO0FBRTdELFVBQUE7TUFBQSxLQUFBLEdBQVE7TUFJUixJQUFBLEdBQU8sY0FBQSxDQUFlLEtBQWY7TUFDUCxHQUFBLEdBQU0sUUFBQSxDQUFTLElBQVQ7TUFFTixNQUFBLEdBQVMsWUFBQSxDQUFhLEdBQWI7TUFFVCxNQUFBLENBQU8sTUFBTyxDQUFBLENBQUEsQ0FBRyxDQUFBLENBQUEsQ0FBRyxDQUFBLENBQUEsQ0FBcEIsQ0FBdUIsQ0FBQyxJQUF4QixDQUE2QixHQUE3QjthQUNBLE1BQUEsQ0FBTyxNQUFPLENBQUEsQ0FBQSxDQUFHLENBQUEsQ0FBQSxDQUFHLENBQUEsQ0FBQSxDQUFwQixDQUF1QixDQUFDLElBQXhCLENBQTZCLEtBQTdCO0lBWjZELENBQS9EO1dBY0EsRUFBQSxDQUFHLDBCQUFILEVBQStCLFNBQUE7QUFDN0IsVUFBQTtNQUFBLEtBQUEsR0FBUTtNQUtSLE1BQUEsR0FBUyxhQUFBLENBQWMsY0FBQSxDQUFlLEtBQWYsQ0FBZDthQUNULE1BQUEsQ0FBTyxNQUFPLENBQUEsY0FBQSxDQUFnQixDQUFBLFFBQUEsQ0FBUyxDQUFDLE1BQXhDLENBQStDLENBQUMsSUFBaEQsQ0FBcUQsQ0FBckQ7SUFQNkIsQ0FBL0I7RUFmd0IsQ0FBMUI7QUFKQSIsInNvdXJjZXNDb250ZW50IjpbImxpYiA9ICcuLi9saWInXG57c2V4cFRvSk9iamVjdCwgYXJyVG9KT2JqZWN0fSA9IHJlcXVpcmUgXCIje2xpYn0vbGlzcC9zd2Fuay1leHRyYXNcIlxue3JlYWRGcm9tU3RyaW5nLCBmcm9tTGlzcH0gPSByZXF1aXJlIFwiI3tsaWJ9L2xpc3AvbGlzcFwiXG5cbmRlc2NyaWJlICdzZXhwVG9KT2JqZWN0JywgLT5cbiAgaXQgXCJzaG91bGQgcGFyc2UgdGhlIHByb2JsZW1hdGljIHBhcnQgb2YgY29tcGxldGlvbiByZXNwb25zZVwiLCAtPlxuXG4gICAgaW5wdXQgPSBcIlwiXCJcbiAgICAoKChcInhcIiBcIkludFwiKSAoXCJ5XCIgXCJJbnRcIikpKVxuICAgIFwiXCJcIlxuXG4gICAgbGlzcCA9IHJlYWRGcm9tU3RyaW5nKGlucHV0KVxuICAgIGFyciA9IGZyb21MaXNwKGxpc3ApXG5cbiAgICByZXN1bHQgPSBhcnJUb0pPYmplY3QoYXJyKVxuXG4gICAgZXhwZWN0KHJlc3VsdFswXVswXVswXSkudG9CZShcInhcIilcbiAgICBleHBlY3QocmVzdWx0WzBdWzFdWzFdKS50b0JlKFwiSW50XCIpXG5cbiAgaXQgXCJzaG91bGQgcGFyc2Ugc2NhbGEgbm90ZXNcIiwgLT5cbiAgICBpbnB1dCA9IFwiXCJcIlxuICAgICg6c2NhbGEtbm90ZXMgKDppcy1mdWxsIG5pbCA6bm90ZXMgKCg6ZmlsZSBcIi9Vc2Vycy92aWt0b3IvZGV2L3Byb2plY3RzL2tvc3RiZXZha25pbmdlbi9zcmMvbWFpbi9zY2FsYS9zZS9rb3N0YmV2YWtuaW5nZW4vbW9kZWwvcmVjb3JkL0luZ3JlZGllbnQuc2NhbGFcIiA6bXNnIFwibWlzc2luZ1xuICAgICBhcmd1bWVudHMgZm9yIG1ldGhvZCB0ZXN0IGluIG9iamVjdCBJbmdyZWRpZW50OyBmb2xsb3cgdGhpcyBtZXRob2Qgd2l0aCBgXycgaWYgeW91IHdhbnQgdG8gdHJlYXQgaXQgYXMgYSBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvblwiIDpzZXZlcml0eSBlcnJvciA6YmVnIDQxMzggOmVuZCA0MTQyIDpsaW5lIDEwNSA6Y29sIDMpKSkpXG4gICAgXCJcIlwiXG5cbiAgICByZXN1bHQgPSBzZXhwVG9KT2JqZWN0KHJlYWRGcm9tU3RyaW5nKGlucHV0KSlcbiAgICBleHBlY3QocmVzdWx0W1wiOnNjYWxhLW5vdGVzXCJdW1wiOm5vdGVzXCJdLmxlbmd0aCkudG9CZSgxKVxuIl19
