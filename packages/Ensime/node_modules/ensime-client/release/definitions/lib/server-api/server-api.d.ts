import { ServerConnection } from './server-connection';
import { Typehinted, SymbolInfo, CompletionsResponse, RefactoringDesc, Point } from './server-protocol';
export declare function apiOf(client: ServerConnection): Api;
export interface Api {
    getCompletions: (filePath: string, bufferText: any, offset: any, noOfAutocompleteSuggestions: any) => PromiseLike<CompletionsResponse>;
    getSymbolAtPoint: (path: string, offset: any) => PromiseLike<SymbolInfo>;
    typecheckFile: (path: string) => PromiseLike<Typehinted>;
    typecheckBuffer: (path: string, text: string) => void;
    symbolByName: (qualifiedName: any) => PromiseLike<Typehinted>;
    formatSourceFile: (path: any, contents: any, callback: any) => PromiseLike<Typehinted>;
    getImplicitInfo: (path: string, startO: number, endO: number) => PromiseLike<Typehinted>;
    typecheckAll(): void;
    unloadAll(): void;
    getRefactoringPatch: (procId: number, refactoring: RefactoringDesc) => PromiseLike<Typehinted>;
    searchPublicSymbols(keywords: string[], maxSymbols: number): PromiseLike<Typehinted>;
    getDocUriAtPoint(file: string, point: Point): PromiseLike<Typehinted>;
    getImportSuggestions(file: string, characterIndex: number, symbol: string): PromiseLike<Typehinted>;
}
