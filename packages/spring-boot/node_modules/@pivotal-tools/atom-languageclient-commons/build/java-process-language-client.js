"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const portfinder_1 = require("portfinder");
const net_1 = require("net");
const atom_1 = require("atom");
const sts_adapter_1 = require("./sts-adapter");
const atom_languageclient_1 = require("atom-languageclient");
const jvm_launch_utils_1 = require("@pivotal-tools/jvm-launch-utils");
class JavaProcessLanguageClient extends atom_languageclient_1.AutoLanguageClient {
    constructor(serverHome, serverLauncherJar) {
        super();
        this.serverHome = serverHome;
        this.serverLauncherJar = serverLauncherJar;
        this.DEBUG = false;
    }
    getServerJar() {
        return path.resolve(this.serverHome, this.serverLauncherJar);
    }
    showErrorMessage(detail, desc) {
        const atomEnv = atom;
        const notification = atomEnv.notifications.addError('Cannot start Language Server', {
            dismissable: true,
            detail: detail,
            description: desc,
            buttons: [{
                    text: 'OK',
                    onDidClick: () => {
                        notification.dismiss();
                    },
                }]
        });
        return Promise.reject(new Error(detail));
    }
    getInitializeParams(projectPath, process) {
        const initParams = super.getInitializeParams(projectPath, process);
        initParams.capabilities = {
            workspace: {
                executeCommand: {}
            }
        };
        return super.getInitializeParams(projectPath, process);
    }
    startServerProcess(projectPath) {
        // TODO: Remove when debugging is over
        const atomEnv = atom;
        atomEnv.config.set('core.debugLSP', true);
        let childProcess;
        if (this.DEBUG) {
            return this.connectToLS();
        }
        return new Promise((resolve, reject) => {
            let basePort = Math.floor(Math.random() * 10000) + 40000;
            portfinder_1.getPort({ port: basePort }, (err, port) => {
                this.server = net_1.createServer(socket => {
                    this.socket = socket;
                    resolve(childProcess);
                });
                this.server.listen(port, 'localhost', () => {
                    this.launchProcess(port).then(p => childProcess = p);
                });
            });
        });
    }
    connectToLS() {
        return new Promise(resolve => {
            this.socket = net_1.connect({
                port: 5007
            });
            const stdout = {
                setEncoding: () => {
                    return stdout;
                },
                on: () => stdout
            };
            const process = {
                stdin: {},
                stdout: stdout,
                stderr: stdout,
                pid: -1,
                kill: () => {
                    console.log('fake shutdown');
                },
                on: () => process,
                addListener: () => process,
                prependListener: () => process,
                once: () => process,
                prependOnceListener: () => process,
                removeListener: () => process,
                removeAllListeners: () => process,
                setMaxListeners: () => process,
                getMaxListeners: () => 0,
                listeners: () => [],
                emit: () => false,
                eventNames: () => [],
                listenerCount: () => 0
            };
            resolve(process);
        });
    }
    // Start adapters that are not shared between servers
    postInitialization(server) {
        const stsAdapter = this.createStsAdapter() || new sts_adapter_1.StsAdapter();
        server.connection._onRequest({ method: 'sts/moveCursor' }, (params) => stsAdapter.onMoveCursor(params));
        server.connection.onCustom('sts/progress', (params) => stsAdapter.onProgress(params));
        server.connection.onCustom('sts/highlight', (params) => stsAdapter.onHighlight(params));
        server.disposable.add(new atom_1.Disposable(() => {
            if (this.server) {
                this.server.close();
            }
        }));
    }
    preferJdk() {
        return false;
    }
    findJvm() {
        return this.preferJdk() ? jvm_launch_utils_1.findJdk() : jvm_launch_utils_1.findJvm();
    }
    launchProcess(port) {
        return this.findJvm()
            .catch(error => {
            return this.showErrorMessage("Error trying to find JVM", "" + error);
        })
            .then(jvm => {
            if (!jvm) {
                return this.showErrorMessage("Couldn't locate java in $JAVA_HOME or $PATH");
            }
            let version = jvm.getMajorVersion();
            if (version < 8) {
                return this.showErrorMessage('No compatible Java Runtime Environment found', 'The Java Runtime Environment is either below version "1.8" or is missing from the system');
            }
            return this.launchVmArgs(jvm).then(args => {
                args.push(`-Dserver.port=${port}`);
                return this.doLaunchProcess(jvm, this.getServerJar(), args);
            });
        });
    }
    launchVmArgs(jvm) {
        return Promise.resolve([]);
    }
    doLaunchProcess(jvm, launcher, args = []) {
        let vmArgs = args.concat([
            // Atom doesn't have lazy completion proposals support - completionItem/resolve message. Disable lazy completions
            '-Dsts.lsp.client=atom',
            // '-Dlsp.completions.indentation.enable=true', // Looks like Atom has magic indents same like VSCode - comment it out
            '-Dlsp.yaml.completions.errors.disable=true',
        ]);
        this.logger.debug(`starting "${jvm.getJavaExecutable()} ${vmArgs.join('\n')}\n-jar ${launcher}"`);
        return jvm.jarLaunch(launcher, vmArgs, { cwd: this.serverHome });
    }
    createStsAdapter() {
        return null;
    }
}
exports.JavaProcessLanguageClient = JavaProcessLanguageClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamF2YS1wcm9jZXNzLWxhbmd1YWdlLWNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2xpYi9qYXZhLXByb2Nlc3MtbGFuZ3VhZ2UtY2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQTZCO0FBQzdCLDJDQUFtQztBQUNuQyw2QkFBa0Q7QUFDbEQsK0JBQWlEO0FBQ2pELCtDQUFnRztBQUVoRyw2REFBdUQ7QUFDdkQsc0VBQXNFO0FBSXRFLCtCQUF1QyxTQUFRLHdDQUFrQjtJQU03RCxZQUFzQixVQUFrQixFQUFZLGlCQUF5QjtRQUN6RSxLQUFLLEVBQUUsQ0FBQztRQURVLGVBQVUsR0FBVixVQUFVLENBQVE7UUFBWSxzQkFBaUIsR0FBakIsaUJBQWlCLENBQVE7UUFKN0UsVUFBSyxHQUFHLEtBQUssQ0FBQztJQU1kLENBQUM7SUFFRCxZQUFZO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVELGdCQUFnQixDQUFDLE1BQWMsRUFBRSxJQUFhO1FBQzFDLE1BQU0sT0FBTyxHQUFvQixJQUFJLENBQUM7UUFDdEMsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsOEJBQThCLEVBQUU7WUFDaEYsV0FBVyxFQUFFLElBQUk7WUFDakIsTUFBTSxFQUFFLE1BQU07WUFDZCxXQUFXLEVBQUUsSUFBSTtZQUNqQixPQUFPLEVBQUUsQ0FBQztvQkFDTixJQUFJLEVBQUUsSUFBSTtvQkFDVixVQUFVLEVBQUUsR0FBRyxFQUFFO3dCQUNiLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQTtvQkFDMUIsQ0FBQztpQkFDSixDQUFDO1NBQ0wsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDN0Ms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Q0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFTyxlQUFlLENBQUMsR0FBUSxFQUFFLFFBQWdCLEVBQUUsT0FBZ0IsRUFBRTtRQUNsRSxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ3JCLGlIQUFpSDtZQUNqSCx1QkFBdUI7WUFDdkIsc0hBQXNIO1lBQ3RILDRDQUE0QztTQUMvQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUNsRyxPQUFPLEdBQUcsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsZ0JBQWdCO1FBQ1osT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUVKO0FBOUtELDhEQThLQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQge2dldFBvcnR9IGZyb20gJ3BvcnRmaW5kZXInO1xuaW1wb3J0IHtTZXJ2ZXIsIGNyZWF0ZVNlcnZlciwgY29ubmVjdH0gZnJvbSAnbmV0JztcbmltcG9ydCB7QXRvbUVudmlyb25tZW50LCBEaXNwb3NhYmxlfSBmcm9tICdhdG9tJztcbmltcG9ydCB7SGlnaGxpZ2h0UGFyYW1zLCBQcm9ncmVzc1BhcmFtcywgQ3Vyc29yTW92ZW1lbnRQYXJhbXMsIFN0c0FkYXB0ZXJ9IGZyb20gJy4vc3RzLWFkYXB0ZXInO1xuaW1wb3J0IHtBY3RpdmVTZXJ2ZXIsIExhbmd1YWdlU2VydmVyUHJvY2Vzc30gZnJvbSAnYXRvbS1sYW5ndWFnZWNsaWVudCc7XG5pbXBvcnQge0F1dG9MYW5ndWFnZUNsaWVudH0gZnJvbSAnYXRvbS1sYW5ndWFnZWNsaWVudCc7XG5pbXBvcnQge2ZpbmRKZGssIGZpbmRKdm0sIEpWTX0gZnJvbSAnQHBpdm90YWwtdG9vbHMvanZtLWxhdW5jaC11dGlscyc7XG5pbXBvcnQge0luaXRpYWxpemVQYXJhbXN9IGZyb20gJ3ZzY29kZS1sYW5ndWFnZXNlcnZlci1wcm90b2NvbCc7XG5pbXBvcnQge1dyaXRhYmxlfSBmcm9tICdzdHJlYW0nO1xuXG5leHBvcnQgY2xhc3MgSmF2YVByb2Nlc3NMYW5ndWFnZUNsaWVudCBleHRlbmRzIEF1dG9MYW5ndWFnZUNsaWVudCB7XG5cbiAgICBERUJVRyA9IGZhbHNlO1xuXG4gICAgcHJpdmF0ZSBzZXJ2ZXI6IFNlcnZlcjtcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBzZXJ2ZXJIb21lOiBzdHJpbmcsIHByb3RlY3RlZCBzZXJ2ZXJMYXVuY2hlckphcjogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgZ2V0U2VydmVySmFyKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBwYXRoLnJlc29sdmUodGhpcy5zZXJ2ZXJIb21lLCB0aGlzLnNlcnZlckxhdW5jaGVySmFyKTtcbiAgICB9XG5cbiAgICBzaG93RXJyb3JNZXNzYWdlKGRldGFpbDogc3RyaW5nLCBkZXNjPzogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgYXRvbUVudjogQXRvbUVudmlyb25tZW50ID0gYXRvbTtcbiAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uID0gYXRvbUVudi5ub3RpZmljYXRpb25zLmFkZEVycm9yKCdDYW5ub3Qgc3RhcnQgTGFuZ3VhZ2UgU2VydmVyJywge1xuICAgICAgICAgICAgZGlzbWlzc2FibGU6IHRydWUsXG4gICAgICAgICAgICBkZXRhaWw6IGRldGFpbCxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjLFxuICAgICAgICAgICAgYnV0dG9uczogW3tcbiAgICAgICAgICAgICAgICB0ZXh0OiAnT0snLFxuICAgICAgICAgICAgICAgIG9uRGlkQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uLmRpc21pc3MoKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9XVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihkZXRhaWwpKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0SW5pdGlhbGl6ZVBhcmFtcyhwcm9qZWN0UGF0aDogc3RyaW5nLCBwcm9jZXNzOiBMYW5ndWFnZVNlcnZlclByb2Nlc3MpOiBJbml0aWFsaXplUGFyYW1zIHtcbiAgICAgICAgY29uc3QgaW5pdFBhcmFtcyA9IHN1cGVyLmdldEluaXRpYWxpemVQYXJhbXMocHJvamVjdFBhdGgsIHByb2Nlc3MpO1xuICAgICAgICBpbml0UGFyYW1zLmNhcGFiaWxpdGllcyA9IHtcbiAgICAgICAgICAgIHdvcmtzcGFjZToge1xuICAgICAgICAgICAgICAgIGV4ZWN1dGVDb21tYW5kOiB7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0SW5pdGlhbGl6ZVBhcmFtcyhwcm9qZWN0UGF0aCwgcHJvY2Vzcyk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHN0YXJ0U2VydmVyUHJvY2Vzcyhwcm9qZWN0UGF0aDogc3RyaW5nKTogTGFuZ3VhZ2VTZXJ2ZXJQcm9jZXNzIHwgUHJvbWlzZTxMYW5ndWFnZVNlcnZlclByb2Nlc3M+IHtcbiAgICAgICAgLy8gVE9ETzogUmVtb3ZlIHdoZW4gZGVidWdnaW5nIGlzIG92ZXJcbiAgICAgICAgY29uc3QgYXRvbUVudjogQXRvbUVudmlyb25tZW50ID0gYXRvbTtcbiAgICAgICAgYXRvbUVudi5jb25maWcuc2V0KCdjb3JlLmRlYnVnTFNQJywgdHJ1ZSk7XG5cbiAgICAgICAgbGV0IGNoaWxkUHJvY2VzczogTGFuZ3VhZ2VTZXJ2ZXJQcm9jZXNzO1xuXG4gICAgICAgIGlmICh0aGlzLkRFQlVHKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0VG9MUygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGxldCBiYXNlUG9ydCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwKSArIDQwMDAwO1xuICAgICAgICAgICAgZ2V0UG9ydCh7cG9ydDogYmFzZVBvcnR9LCAoZXJyLCBwb3J0KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXJ2ZXIgPSBjcmVhdGVTZXJ2ZXIoc29ja2V0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb2NrZXQgPSBzb2NrZXQ7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoY2hpbGRQcm9jZXNzKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuc2VydmVyLmxpc3Rlbihwb3J0LCAnbG9jYWxob3N0JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhdW5jaFByb2Nlc3MocG9ydCkudGhlbihwID0+IGNoaWxkUHJvY2VzcyA9IHApO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgY29ubmVjdFRvTFMoKTogTGFuZ3VhZ2VTZXJ2ZXJQcm9jZXNzIHwgUHJvbWlzZTxMYW5ndWFnZVNlcnZlclByb2Nlc3M+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQgPSBjb25uZWN0KHtcbiAgICAgICAgICAgICAgICBwb3J0OiA1MDA3XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHN0ZG91dDogYW55ID0ge1xuICAgICAgICAgICAgICAgIHNldEVuY29kaW5nOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGRvdXQ7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbjogKCkgPT4gc3Rkb3V0XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcHJvY2VzczogTGFuZ3VhZ2VTZXJ2ZXJQcm9jZXNzID0ge1xuICAgICAgICAgICAgICAgIHN0ZGluOiA8V3JpdGFibGU+e30sXG4gICAgICAgICAgICAgICAgc3Rkb3V0OiBzdGRvdXQsXG4gICAgICAgICAgICAgICAgc3RkZXJyOiBzdGRvdXQsXG4gICAgICAgICAgICAgICAgcGlkOiAtMSxcbiAgICAgICAgICAgICAgICBraWxsOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmYWtlIHNodXRkb3duJyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbjogKCkgPT4gcHJvY2VzcyxcbiAgICAgICAgICAgICAgICBhZGRMaXN0ZW5lcjogKCkgPT4gcHJvY2VzcyxcbiAgICAgICAgICAgICAgICBwcmVwZW5kTGlzdGVuZXI6ICgpID0+IHByb2Nlc3MsXG4gICAgICAgICAgICAgICAgb25jZTogKCkgPT4gcHJvY2VzcyxcbiAgICAgICAgICAgICAgICBwcmVwZW5kT25jZUxpc3RlbmVyOiAoKSA9PiBwcm9jZXNzLFxuICAgICAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVyOiAoKSA9PiBwcm9jZXNzLFxuICAgICAgICAgICAgICAgIHJlbW92ZUFsbExpc3RlbmVyczogKCkgPT4gcHJvY2VzcyxcbiAgICAgICAgICAgICAgICBzZXRNYXhMaXN0ZW5lcnM6ICgpID0+IHByb2Nlc3MsXG4gICAgICAgICAgICAgICAgZ2V0TWF4TGlzdGVuZXJzOiAoKSA9PiAwLFxuICAgICAgICAgICAgICAgIGxpc3RlbmVyczogKCkgPT4gW10sXG4gICAgICAgICAgICAgICAgZW1pdDogKCkgPT4gZmFsc2UsXG4gICAgICAgICAgICAgICAgZXZlbnROYW1lczogKCkgPT4gW10sXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJDb3VudDogKCkgPT4gMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlc29sdmUocHJvY2Vzcyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFN0YXJ0IGFkYXB0ZXJzIHRoYXQgYXJlIG5vdCBzaGFyZWQgYmV0d2VlbiBzZXJ2ZXJzXG4gICAgcHJvdGVjdGVkIHBvc3RJbml0aWFsaXphdGlvbihzZXJ2ZXI6IEFjdGl2ZVNlcnZlcik6IHZvaWQge1xuICAgICAgICBjb25zdCBzdHNBZGFwdGVyID0gdGhpcy5jcmVhdGVTdHNBZGFwdGVyKCkgfHwgbmV3IFN0c0FkYXB0ZXIoKTtcbiAgICAgICAgKDxhbnk+c2VydmVyLmNvbm5lY3Rpb24pLl9vblJlcXVlc3Qoe21ldGhvZDogJ3N0cy9tb3ZlQ3Vyc29yJ30sIChwYXJhbXM6IEN1cnNvck1vdmVtZW50UGFyYW1zKSA9PiBzdHNBZGFwdGVyLm9uTW92ZUN1cnNvcihwYXJhbXMpKTtcbiAgICAgICAgc2VydmVyLmNvbm5lY3Rpb24ub25DdXN0b20oJ3N0cy9wcm9ncmVzcycsIChwYXJhbXM6IFByb2dyZXNzUGFyYW1zKSA9PiBzdHNBZGFwdGVyLm9uUHJvZ3Jlc3MocGFyYW1zKSk7XG4gICAgICAgIHNlcnZlci5jb25uZWN0aW9uLm9uQ3VzdG9tKCdzdHMvaGlnaGxpZ2h0JywgKHBhcmFtczogSGlnaGxpZ2h0UGFyYW1zKSA9PiBzdHNBZGFwdGVyLm9uSGlnaGxpZ2h0KHBhcmFtcykpO1xuXG4gICAgICAgIHNlcnZlci5kaXNwb3NhYmxlLmFkZChuZXcgRGlzcG9zYWJsZSgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5zZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlcnZlci5jbG9zZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcblxuICAgIH1cblxuICAgIHByZWZlckpkaygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZpbmRKdm0oKTogUHJvbWlzZTxKVk0gfCBudWxsPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZWZlckpkaygpID8gZmluZEpkaygpIDogZmluZEp2bSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgbGF1bmNoUHJvY2Vzcyhwb3J0OiBudW1iZXIpOiBQcm9taXNlPExhbmd1YWdlU2VydmVyUHJvY2Vzcz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5maW5kSnZtKClcbiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2hvd0Vycm9yTWVzc2FnZShcIkVycm9yIHRyeWluZyB0byBmaW5kIEpWTVwiLCBcIlwiK2Vycm9yKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihqdm0gPT4ge1xuICAgICAgICAgICAgICAgIGlmICghanZtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNob3dFcnJvck1lc3NhZ2UoXCJDb3VsZG4ndCBsb2NhdGUgamF2YSBpbiAkSkFWQV9IT01FIG9yICRQQVRIXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgdmVyc2lvbiA9IGp2bS5nZXRNYWpvclZlcnNpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAodmVyc2lvbjw4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNob3dFcnJvck1lc3NhZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAnTm8gY29tcGF0aWJsZSBKYXZhIFJ1bnRpbWUgRW52aXJvbm1lbnQgZm91bmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1RoZSBKYXZhIFJ1bnRpbWUgRW52aXJvbm1lbnQgaXMgZWl0aGVyIGJlbG93IHZlcnNpb24gXCIxLjhcIiBvciBpcyBtaXNzaW5nIGZyb20gdGhlIHN5c3RlbSdcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGF1bmNoVm1BcmdzKGp2bSkudGhlbihhcmdzID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGAtRHNlcnZlci5wb3J0PSR7cG9ydH1gKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9MYXVuY2hQcm9jZXNzKFxuICAgICAgICAgICAgICAgICAgICAgICAganZtLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRTZXJ2ZXJKYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3NcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBsYXVuY2hWbUFyZ3MoanZtOiBKVk0pOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pO1xuICAgIH1cblxuICAgIHByaXZhdGUgZG9MYXVuY2hQcm9jZXNzKGp2bTogSlZNLCBsYXVuY2hlcjogc3RyaW5nLCBhcmdzOiBzdHJpbmdbXSA9W10pOiBMYW5ndWFnZVNlcnZlclByb2Nlc3Mge1xuICAgICAgICBsZXQgdm1BcmdzID0gYXJncy5jb25jYXQoW1xuICAgICAgICAgICAgLy8gQXRvbSBkb2Vzbid0IGhhdmUgbGF6eSBjb21wbGV0aW9uIHByb3Bvc2FscyBzdXBwb3J0IC0gY29tcGxldGlvbkl0ZW0vcmVzb2x2ZSBtZXNzYWdlLiBEaXNhYmxlIGxhenkgY29tcGxldGlvbnNcbiAgICAgICAgICAgICctRHN0cy5sc3AuY2xpZW50PWF0b20nLFxuICAgICAgICAgICAgLy8gJy1EbHNwLmNvbXBsZXRpb25zLmluZGVudGF0aW9uLmVuYWJsZT10cnVlJywgLy8gTG9va3MgbGlrZSBBdG9tIGhhcyBtYWdpYyBpbmRlbnRzIHNhbWUgbGlrZSBWU0NvZGUgLSBjb21tZW50IGl0IG91dFxuICAgICAgICAgICAgJy1EbHNwLnlhbWwuY29tcGxldGlvbnMuZXJyb3JzLmRpc2FibGU9dHJ1ZScsXG4gICAgICAgIF0pO1xuXG4gICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBzdGFydGluZyBcIiR7anZtLmdldEphdmFFeGVjdXRhYmxlKCl9ICR7dm1BcmdzLmpvaW4oJ1xcbicpfVxcbi1qYXIgJHtsYXVuY2hlcn1cImApO1xuICAgICAgICByZXR1cm4ganZtLmphckxhdW5jaChsYXVuY2hlciwgdm1BcmdzLCB7IGN3ZDogdGhpcy5zZXJ2ZXJIb21lIH0pO1xuICAgIH1cblxuICAgIGNyZWF0ZVN0c0FkYXB0ZXIoKTogU3RzQWRhcHRlciB8IG51bGwge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbn1cblxuIl19